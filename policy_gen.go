// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package ristretto

import (
	zExp "github.com/brainflake/ristretto/z"
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *defaultPolicy) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_539c1932b884c479_1 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_539c1932b884c479_1 uint32
	totalEncodedFields0zgensym_539c1932b884c479_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_539c1932b884c479_1 := totalEncodedFields0zgensym_539c1932b884c479_1
	missingFieldsLeft0zgensym_539c1932b884c479_1 := maxFields0zgensym_539c1932b884c479_1 - totalEncodedFields0zgensym_539c1932b884c479_1

	var nextMiss0zgensym_539c1932b884c479_1 int32 = -1
	var found0zgensym_539c1932b884c479_1 [maxFields0zgensym_539c1932b884c479_1]bool
	var curField0zgensym_539c1932b884c479_1 string

doneWithStruct0zgensym_539c1932b884c479_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_539c1932b884c479_1 > 0 || missingFieldsLeft0zgensym_539c1932b884c479_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_539c1932b884c479_1, missingFieldsLeft0zgensym_539c1932b884c479_1, msgp.ShowFound(found0zgensym_539c1932b884c479_1[:]), decodeMsgFieldOrder0zgensym_539c1932b884c479_1)
		if encodedFieldsLeft0zgensym_539c1932b884c479_1 > 0 {
			encodedFieldsLeft0zgensym_539c1932b884c479_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_539c1932b884c479_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_539c1932b884c479_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_539c1932b884c479_1 = 0
			}
			for nextMiss0zgensym_539c1932b884c479_1 < maxFields0zgensym_539c1932b884c479_1 && (found0zgensym_539c1932b884c479_1[nextMiss0zgensym_539c1932b884c479_1] || decodeMsgFieldSkip0zgensym_539c1932b884c479_1[nextMiss0zgensym_539c1932b884c479_1]) {
				nextMiss0zgensym_539c1932b884c479_1++
			}
			if nextMiss0zgensym_539c1932b884c479_1 == maxFields0zgensym_539c1932b884c479_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_539c1932b884c479_1
			}
			missingFieldsLeft0zgensym_539c1932b884c479_1--
			curField0zgensym_539c1932b884c479_1 = decodeMsgFieldOrder0zgensym_539c1932b884c479_1[nextMiss0zgensym_539c1932b884c479_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_539c1932b884c479_1)
		switch curField0zgensym_539c1932b884c479_1 {
		// -- templateDecodeMsg ends here --

		case "admit__ptr":
			found0zgensym_539c1932b884c479_1[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.admit != nil {
					dc.PushAlwaysNil()
					err = z.admit.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.admit == nil {
					z.admit = new(tinyLFU)
				}
				dc.DedupIndexEachPtr(z.admit)

				err = z.admit.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_539c1932b884c479_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of defaultPolicy
var decodeMsgFieldOrder0zgensym_539c1932b884c479_1 = []string{"", "admit__ptr", "", "", "", "", ""}

var decodeMsgFieldSkip0zgensym_539c1932b884c479_1 = []bool{true, false, true, true, true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *defaultPolicy) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[1] = (z.admit == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *defaultPolicy) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_539c1932b884c479_2 [7]bool
	fieldsInUse_zgensym_539c1932b884c479_3 := z.fieldsNotEmpty(empty_zgensym_539c1932b884c479_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_539c1932b884c479_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'defaultPolicy'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_539c1932b884c479_2[1] {
		// write "admit__ptr"
		err = en.Append(0xaa, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.admit == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.admit)
			if err != nil {
				return
			}
			if !dup {
				err = z.admit.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *defaultPolicy) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[1] {
		// string "admit__ptr"
		o = append(o, 0xaa, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.admit == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.admit.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *defaultPolicy) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *defaultPolicy) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_539c1932b884c479_5 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_539c1932b884c479_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_539c1932b884c479_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_539c1932b884c479_5 := totalEncodedFields4zgensym_539c1932b884c479_5
	missingFieldsLeft4zgensym_539c1932b884c479_5 := maxFields4zgensym_539c1932b884c479_5 - totalEncodedFields4zgensym_539c1932b884c479_5

	var nextMiss4zgensym_539c1932b884c479_5 int32 = -1
	var found4zgensym_539c1932b884c479_5 [maxFields4zgensym_539c1932b884c479_5]bool
	var curField4zgensym_539c1932b884c479_5 string

doneWithStruct4zgensym_539c1932b884c479_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_539c1932b884c479_5 > 0 || missingFieldsLeft4zgensym_539c1932b884c479_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_539c1932b884c479_5, missingFieldsLeft4zgensym_539c1932b884c479_5, msgp.ShowFound(found4zgensym_539c1932b884c479_5[:]), unmarshalMsgFieldOrder4zgensym_539c1932b884c479_5)
		if encodedFieldsLeft4zgensym_539c1932b884c479_5 > 0 {
			encodedFieldsLeft4zgensym_539c1932b884c479_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_539c1932b884c479_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_539c1932b884c479_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_539c1932b884c479_5 = 0
			}
			for nextMiss4zgensym_539c1932b884c479_5 < maxFields4zgensym_539c1932b884c479_5 && (found4zgensym_539c1932b884c479_5[nextMiss4zgensym_539c1932b884c479_5] || unmarshalMsgFieldSkip4zgensym_539c1932b884c479_5[nextMiss4zgensym_539c1932b884c479_5]) {
				nextMiss4zgensym_539c1932b884c479_5++
			}
			if nextMiss4zgensym_539c1932b884c479_5 == maxFields4zgensym_539c1932b884c479_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_539c1932b884c479_5
			}
			missingFieldsLeft4zgensym_539c1932b884c479_5--
			curField4zgensym_539c1932b884c479_5 = unmarshalMsgFieldOrder4zgensym_539c1932b884c479_5[nextMiss4zgensym_539c1932b884c479_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_539c1932b884c479_5)
		switch curField4zgensym_539c1932b884c479_5 {
		// -- templateUnmarshalMsg ends here --

		case "admit__ptr":
			found4zgensym_539c1932b884c479_5[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.admit", alias:"tinyLFU", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.admit != nil {
					z.admit.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.admit {
						z.admit.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.admit == nil {
						z.admit = new(tinyLFU)
					}

					bts, err = z.admit.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_539c1932b884c479_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of defaultPolicy
var unmarshalMsgFieldOrder4zgensym_539c1932b884c479_5 = []string{"", "admit__ptr", "", "", "", "", ""}

var unmarshalMsgFieldSkip4zgensym_539c1932b884c479_5 = []bool{true, false, true, true, true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *defaultPolicy) Msgsize() (s int) {
	s = 1 + 11
	if z.admit == nil {
		s += msgp.NilSize
	} else {
		s += z.admit.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *policyPair) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_539c1932b884c479_7 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_539c1932b884c479_7 uint32
	totalEncodedFields6zgensym_539c1932b884c479_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_539c1932b884c479_7 := totalEncodedFields6zgensym_539c1932b884c479_7
	missingFieldsLeft6zgensym_539c1932b884c479_7 := maxFields6zgensym_539c1932b884c479_7 - totalEncodedFields6zgensym_539c1932b884c479_7

	var nextMiss6zgensym_539c1932b884c479_7 int32 = -1
	var found6zgensym_539c1932b884c479_7 [maxFields6zgensym_539c1932b884c479_7]bool
	var curField6zgensym_539c1932b884c479_7 string

doneWithStruct6zgensym_539c1932b884c479_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_539c1932b884c479_7 > 0 || missingFieldsLeft6zgensym_539c1932b884c479_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_539c1932b884c479_7, missingFieldsLeft6zgensym_539c1932b884c479_7, msgp.ShowFound(found6zgensym_539c1932b884c479_7[:]), decodeMsgFieldOrder6zgensym_539c1932b884c479_7)
		if encodedFieldsLeft6zgensym_539c1932b884c479_7 > 0 {
			encodedFieldsLeft6zgensym_539c1932b884c479_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_539c1932b884c479_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_539c1932b884c479_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_539c1932b884c479_7 = 0
			}
			for nextMiss6zgensym_539c1932b884c479_7 < maxFields6zgensym_539c1932b884c479_7 && (found6zgensym_539c1932b884c479_7[nextMiss6zgensym_539c1932b884c479_7] || decodeMsgFieldSkip6zgensym_539c1932b884c479_7[nextMiss6zgensym_539c1932b884c479_7]) {
				nextMiss6zgensym_539c1932b884c479_7++
			}
			if nextMiss6zgensym_539c1932b884c479_7 == maxFields6zgensym_539c1932b884c479_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_539c1932b884c479_7
			}
			missingFieldsLeft6zgensym_539c1932b884c479_7--
			curField6zgensym_539c1932b884c479_7 = decodeMsgFieldOrder6zgensym_539c1932b884c479_7[nextMiss6zgensym_539c1932b884c479_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_539c1932b884c479_7)
		switch curField6zgensym_539c1932b884c479_7 {
		// -- templateDecodeMsg ends here --

		case "key__u64":
			found6zgensym_539c1932b884c479_7[0] = true
			z.key, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "cost__i64":
			found6zgensym_539c1932b884c479_7[1] = true
			z.cost, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_539c1932b884c479_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of policyPair
var decodeMsgFieldOrder6zgensym_539c1932b884c479_7 = []string{"key__u64", "cost__i64"}

var decodeMsgFieldSkip6zgensym_539c1932b884c479_7 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z policyPair) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.key == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.cost == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z policyPair) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_539c1932b884c479_8 [2]bool
	fieldsInUse_zgensym_539c1932b884c479_9 := z.fieldsNotEmpty(empty_zgensym_539c1932b884c479_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_539c1932b884c479_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'policyPair'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_539c1932b884c479_8[0] {
		// write "key__u64"
		err = en.Append(0xa8, 0x6b, 0x65, 0x79, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.key)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_539c1932b884c479_8[1] {
		// write "cost__i64"
		err = en.Append(0xa9, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.cost)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z policyPair) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "key__u64"
		o = append(o, 0xa8, 0x6b, 0x65, 0x79, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.key)
	}

	if !empty[1] {
		// string "cost__i64"
		o = append(o, 0xa9, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.cost)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *policyPair) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *policyPair) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_539c1932b884c479_11 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_539c1932b884c479_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_539c1932b884c479_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_539c1932b884c479_11 := totalEncodedFields10zgensym_539c1932b884c479_11
	missingFieldsLeft10zgensym_539c1932b884c479_11 := maxFields10zgensym_539c1932b884c479_11 - totalEncodedFields10zgensym_539c1932b884c479_11

	var nextMiss10zgensym_539c1932b884c479_11 int32 = -1
	var found10zgensym_539c1932b884c479_11 [maxFields10zgensym_539c1932b884c479_11]bool
	var curField10zgensym_539c1932b884c479_11 string

doneWithStruct10zgensym_539c1932b884c479_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_539c1932b884c479_11 > 0 || missingFieldsLeft10zgensym_539c1932b884c479_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_539c1932b884c479_11, missingFieldsLeft10zgensym_539c1932b884c479_11, msgp.ShowFound(found10zgensym_539c1932b884c479_11[:]), unmarshalMsgFieldOrder10zgensym_539c1932b884c479_11)
		if encodedFieldsLeft10zgensym_539c1932b884c479_11 > 0 {
			encodedFieldsLeft10zgensym_539c1932b884c479_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_539c1932b884c479_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_539c1932b884c479_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_539c1932b884c479_11 = 0
			}
			for nextMiss10zgensym_539c1932b884c479_11 < maxFields10zgensym_539c1932b884c479_11 && (found10zgensym_539c1932b884c479_11[nextMiss10zgensym_539c1932b884c479_11] || unmarshalMsgFieldSkip10zgensym_539c1932b884c479_11[nextMiss10zgensym_539c1932b884c479_11]) {
				nextMiss10zgensym_539c1932b884c479_11++
			}
			if nextMiss10zgensym_539c1932b884c479_11 == maxFields10zgensym_539c1932b884c479_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_539c1932b884c479_11
			}
			missingFieldsLeft10zgensym_539c1932b884c479_11--
			curField10zgensym_539c1932b884c479_11 = unmarshalMsgFieldOrder10zgensym_539c1932b884c479_11[nextMiss10zgensym_539c1932b884c479_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_539c1932b884c479_11)
		switch curField10zgensym_539c1932b884c479_11 {
		// -- templateUnmarshalMsg ends here --

		case "key__u64":
			found10zgensym_539c1932b884c479_11[0] = true
			z.key, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "cost__i64":
			found10zgensym_539c1932b884c479_11[1] = true
			z.cost, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_539c1932b884c479_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of policyPair
var unmarshalMsgFieldOrder10zgensym_539c1932b884c479_11 = []string{"key__u64", "cost__i64"}

var unmarshalMsgFieldSkip10zgensym_539c1932b884c479_11 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z policyPair) Msgsize() (s int) {
	s = 1 + 9 + msgp.Uint64Size + 10 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *sampledLFU) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_539c1932b884c479_13 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields12zgensym_539c1932b884c479_13 uint32
	totalEncodedFields12zgensym_539c1932b884c479_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_539c1932b884c479_13 := totalEncodedFields12zgensym_539c1932b884c479_13
	missingFieldsLeft12zgensym_539c1932b884c479_13 := maxFields12zgensym_539c1932b884c479_13 - totalEncodedFields12zgensym_539c1932b884c479_13

	var nextMiss12zgensym_539c1932b884c479_13 int32 = -1
	var found12zgensym_539c1932b884c479_13 [maxFields12zgensym_539c1932b884c479_13]bool
	var curField12zgensym_539c1932b884c479_13 string

doneWithStruct12zgensym_539c1932b884c479_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_539c1932b884c479_13 > 0 || missingFieldsLeft12zgensym_539c1932b884c479_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_539c1932b884c479_13, missingFieldsLeft12zgensym_539c1932b884c479_13, msgp.ShowFound(found12zgensym_539c1932b884c479_13[:]), decodeMsgFieldOrder12zgensym_539c1932b884c479_13)
		if encodedFieldsLeft12zgensym_539c1932b884c479_13 > 0 {
			encodedFieldsLeft12zgensym_539c1932b884c479_13--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField12zgensym_539c1932b884c479_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_539c1932b884c479_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_539c1932b884c479_13 = 0
			}
			for nextMiss12zgensym_539c1932b884c479_13 < maxFields12zgensym_539c1932b884c479_13 && (found12zgensym_539c1932b884c479_13[nextMiss12zgensym_539c1932b884c479_13] || decodeMsgFieldSkip12zgensym_539c1932b884c479_13[nextMiss12zgensym_539c1932b884c479_13]) {
				nextMiss12zgensym_539c1932b884c479_13++
			}
			if nextMiss12zgensym_539c1932b884c479_13 == maxFields12zgensym_539c1932b884c479_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_539c1932b884c479_13
			}
			missingFieldsLeft12zgensym_539c1932b884c479_13--
			curField12zgensym_539c1932b884c479_13 = decodeMsgFieldOrder12zgensym_539c1932b884c479_13[nextMiss12zgensym_539c1932b884c479_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_539c1932b884c479_13)
		switch curField12zgensym_539c1932b884c479_13 {
		// -- templateDecodeMsg ends here --

		case "maxCost_zid00_i64":
			found12zgensym_539c1932b884c479_13[0] = true
			z.maxCost, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "used_zid01_i64":
			found12zgensym_539c1932b884c479_13[1] = true
			z.used, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "metrics_zid02_ptr":
			found12zgensym_539c1932b884c479_13[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.metrics != nil {
					dc.PushAlwaysNil()
					err = z.metrics.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.metrics == nil {
					z.metrics = new(Metrics)
				}
				dc.DedupIndexEachPtr(z.metrics)

				err = z.metrics.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_539c1932b884c479_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of sampledLFU
var decodeMsgFieldOrder12zgensym_539c1932b884c479_13 = []string{"maxCost_zid00_i64", "used_zid01_i64", "metrics_zid02_ptr", ""}

var decodeMsgFieldSkip12zgensym_539c1932b884c479_13 = []bool{false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *sampledLFU) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.maxCost == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.used == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.metrics == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *sampledLFU) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_539c1932b884c479_14 [4]bool
	fieldsInUse_zgensym_539c1932b884c479_15 := z.fieldsNotEmpty(empty_zgensym_539c1932b884c479_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_539c1932b884c479_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'sampledLFU'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x4c, 0x46, 0x55})
	if err != nil {
		return err
	}

	if !empty_zgensym_539c1932b884c479_14[0] {
		// write "maxCost_zid00_i64"
		err = en.Append(0xb1, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.maxCost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_539c1932b884c479_14[1] {
		// write "used_zid01_i64"
		err = en.Append(0xae, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.used)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_539c1932b884c479_14[2] {
		// write "metrics_zid02_ptr"
		err = en.Append(0xb1, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.metrics == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.metrics)
			if err != nil {
				return
			}
			if !dup {
				err = z.metrics.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *sampledLFU) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "maxCost_zid00_i64"
		o = append(o, 0xb1, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.maxCost)
	}

	if !empty[1] {
		// string "used_zid01_i64"
		o = append(o, 0xae, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.used)
	}

	if !empty[2] {
		// string "metrics_zid02_ptr"
		o = append(o, 0xb1, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.metrics == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.metrics.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *sampledLFU) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *sampledLFU) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_539c1932b884c479_17 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_539c1932b884c479_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_539c1932b884c479_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_539c1932b884c479_17 := totalEncodedFields16zgensym_539c1932b884c479_17
	missingFieldsLeft16zgensym_539c1932b884c479_17 := maxFields16zgensym_539c1932b884c479_17 - totalEncodedFields16zgensym_539c1932b884c479_17

	var nextMiss16zgensym_539c1932b884c479_17 int32 = -1
	var found16zgensym_539c1932b884c479_17 [maxFields16zgensym_539c1932b884c479_17]bool
	var curField16zgensym_539c1932b884c479_17 string

doneWithStruct16zgensym_539c1932b884c479_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_539c1932b884c479_17 > 0 || missingFieldsLeft16zgensym_539c1932b884c479_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_539c1932b884c479_17, missingFieldsLeft16zgensym_539c1932b884c479_17, msgp.ShowFound(found16zgensym_539c1932b884c479_17[:]), unmarshalMsgFieldOrder16zgensym_539c1932b884c479_17)
		if encodedFieldsLeft16zgensym_539c1932b884c479_17 > 0 {
			encodedFieldsLeft16zgensym_539c1932b884c479_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_539c1932b884c479_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_539c1932b884c479_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_539c1932b884c479_17 = 0
			}
			for nextMiss16zgensym_539c1932b884c479_17 < maxFields16zgensym_539c1932b884c479_17 && (found16zgensym_539c1932b884c479_17[nextMiss16zgensym_539c1932b884c479_17] || unmarshalMsgFieldSkip16zgensym_539c1932b884c479_17[nextMiss16zgensym_539c1932b884c479_17]) {
				nextMiss16zgensym_539c1932b884c479_17++
			}
			if nextMiss16zgensym_539c1932b884c479_17 == maxFields16zgensym_539c1932b884c479_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_539c1932b884c479_17
			}
			missingFieldsLeft16zgensym_539c1932b884c479_17--
			curField16zgensym_539c1932b884c479_17 = unmarshalMsgFieldOrder16zgensym_539c1932b884c479_17[nextMiss16zgensym_539c1932b884c479_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_539c1932b884c479_17)
		switch curField16zgensym_539c1932b884c479_17 {
		// -- templateUnmarshalMsg ends here --

		case "maxCost_zid00_i64":
			found16zgensym_539c1932b884c479_17[0] = true
			z.maxCost, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "used_zid01_i64":
			found16zgensym_539c1932b884c479_17[1] = true
			z.used, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "metrics_zid02_ptr":
			found16zgensym_539c1932b884c479_17[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.metrics", alias:"Metrics", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.metrics != nil {
					z.metrics.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.metrics {
						z.metrics.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.metrics == nil {
						z.metrics = new(Metrics)
					}

					bts, err = z.metrics.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_539c1932b884c479_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of sampledLFU
var unmarshalMsgFieldOrder16zgensym_539c1932b884c479_17 = []string{"maxCost_zid00_i64", "used_zid01_i64", "metrics_zid02_ptr", ""}

var unmarshalMsgFieldSkip16zgensym_539c1932b884c479_17 = []bool{false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *sampledLFU) Msgsize() (s int) {
	s = 1 + 18 + msgp.Int64Size + 15 + msgp.Int64Size + 18
	if z.metrics == nil {
		s += msgp.NilSize
	} else {
		s += z.metrics.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *sampledLFUExport) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields18zgensym_539c1932b884c479_19 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields18zgensym_539c1932b884c479_19 uint32
	totalEncodedFields18zgensym_539c1932b884c479_19, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft18zgensym_539c1932b884c479_19 := totalEncodedFields18zgensym_539c1932b884c479_19
	missingFieldsLeft18zgensym_539c1932b884c479_19 := maxFields18zgensym_539c1932b884c479_19 - totalEncodedFields18zgensym_539c1932b884c479_19

	var nextMiss18zgensym_539c1932b884c479_19 int32 = -1
	var found18zgensym_539c1932b884c479_19 [maxFields18zgensym_539c1932b884c479_19]bool
	var curField18zgensym_539c1932b884c479_19 string

doneWithStruct18zgensym_539c1932b884c479_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_539c1932b884c479_19 > 0 || missingFieldsLeft18zgensym_539c1932b884c479_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_539c1932b884c479_19, missingFieldsLeft18zgensym_539c1932b884c479_19, msgp.ShowFound(found18zgensym_539c1932b884c479_19[:]), decodeMsgFieldOrder18zgensym_539c1932b884c479_19)
		if encodedFieldsLeft18zgensym_539c1932b884c479_19 > 0 {
			encodedFieldsLeft18zgensym_539c1932b884c479_19--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField18zgensym_539c1932b884c479_19 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss18zgensym_539c1932b884c479_19 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss18zgensym_539c1932b884c479_19 = 0
			}
			for nextMiss18zgensym_539c1932b884c479_19 < maxFields18zgensym_539c1932b884c479_19 && (found18zgensym_539c1932b884c479_19[nextMiss18zgensym_539c1932b884c479_19] || decodeMsgFieldSkip18zgensym_539c1932b884c479_19[nextMiss18zgensym_539c1932b884c479_19]) {
				nextMiss18zgensym_539c1932b884c479_19++
			}
			if nextMiss18zgensym_539c1932b884c479_19 == maxFields18zgensym_539c1932b884c479_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_539c1932b884c479_19
			}
			missingFieldsLeft18zgensym_539c1932b884c479_19--
			curField18zgensym_539c1932b884c479_19 = decodeMsgFieldOrder18zgensym_539c1932b884c479_19[nextMiss18zgensym_539c1932b884c479_19]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_539c1932b884c479_19)
		switch curField18zgensym_539c1932b884c479_19 {
		// -- templateDecodeMsg ends here --

		case "MaxCost__i64":
			found18zgensym_539c1932b884c479_19[0] = true
			z.MaxCost, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Used__i64":
			found18zgensym_539c1932b884c479_19[1] = true
			z.Used, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_539c1932b884c479_19 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of sampledLFUExport
var decodeMsgFieldOrder18zgensym_539c1932b884c479_19 = []string{"MaxCost__i64", "Used__i64", ""}

var decodeMsgFieldSkip18zgensym_539c1932b884c479_19 = []bool{false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z sampledLFUExport) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.MaxCost == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Used == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z sampledLFUExport) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_539c1932b884c479_20 [3]bool
	fieldsInUse_zgensym_539c1932b884c479_21 := z.fieldsNotEmpty(empty_zgensym_539c1932b884c479_20[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_539c1932b884c479_21 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'sampledLFUExport'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x4c, 0x46, 0x55, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_539c1932b884c479_20[0] {
		// write "MaxCost__i64"
		err = en.Append(0xac, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.MaxCost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_539c1932b884c479_20[1] {
		// write "Used__i64"
		err = en.Append(0xa9, 0x55, 0x73, 0x65, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Used)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z sampledLFUExport) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "MaxCost__i64"
		o = append(o, 0xac, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.MaxCost)
	}

	if !empty[1] {
		// string "Used__i64"
		o = append(o, 0xa9, 0x55, 0x73, 0x65, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Used)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *sampledLFUExport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *sampledLFUExport) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields22zgensym_539c1932b884c479_23 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields22zgensym_539c1932b884c479_23 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields22zgensym_539c1932b884c479_23, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft22zgensym_539c1932b884c479_23 := totalEncodedFields22zgensym_539c1932b884c479_23
	missingFieldsLeft22zgensym_539c1932b884c479_23 := maxFields22zgensym_539c1932b884c479_23 - totalEncodedFields22zgensym_539c1932b884c479_23

	var nextMiss22zgensym_539c1932b884c479_23 int32 = -1
	var found22zgensym_539c1932b884c479_23 [maxFields22zgensym_539c1932b884c479_23]bool
	var curField22zgensym_539c1932b884c479_23 string

doneWithStruct22zgensym_539c1932b884c479_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_539c1932b884c479_23 > 0 || missingFieldsLeft22zgensym_539c1932b884c479_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft22zgensym_539c1932b884c479_23, missingFieldsLeft22zgensym_539c1932b884c479_23, msgp.ShowFound(found22zgensym_539c1932b884c479_23[:]), unmarshalMsgFieldOrder22zgensym_539c1932b884c479_23)
		if encodedFieldsLeft22zgensym_539c1932b884c479_23 > 0 {
			encodedFieldsLeft22zgensym_539c1932b884c479_23--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField22zgensym_539c1932b884c479_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_539c1932b884c479_23 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss22zgensym_539c1932b884c479_23 = 0
			}
			for nextMiss22zgensym_539c1932b884c479_23 < maxFields22zgensym_539c1932b884c479_23 && (found22zgensym_539c1932b884c479_23[nextMiss22zgensym_539c1932b884c479_23] || unmarshalMsgFieldSkip22zgensym_539c1932b884c479_23[nextMiss22zgensym_539c1932b884c479_23]) {
				nextMiss22zgensym_539c1932b884c479_23++
			}
			if nextMiss22zgensym_539c1932b884c479_23 == maxFields22zgensym_539c1932b884c479_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_539c1932b884c479_23
			}
			missingFieldsLeft22zgensym_539c1932b884c479_23--
			curField22zgensym_539c1932b884c479_23 = unmarshalMsgFieldOrder22zgensym_539c1932b884c479_23[nextMiss22zgensym_539c1932b884c479_23]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField22zgensym_539c1932b884c479_23)
		switch curField22zgensym_539c1932b884c479_23 {
		// -- templateUnmarshalMsg ends here --

		case "MaxCost__i64":
			found22zgensym_539c1932b884c479_23[0] = true
			z.MaxCost, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Used__i64":
			found22zgensym_539c1932b884c479_23[1] = true
			z.Used, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_539c1932b884c479_23 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of sampledLFUExport
var unmarshalMsgFieldOrder22zgensym_539c1932b884c479_23 = []string{"MaxCost__i64", "Used__i64", ""}

var unmarshalMsgFieldSkip22zgensym_539c1932b884c479_23 = []bool{false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z sampledLFUExport) Msgsize() (s int) {
	s = 1 + 13 + msgp.Int64Size + 10 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *tinyLFU) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields24zgensym_539c1932b884c479_25 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields24zgensym_539c1932b884c479_25 uint32
	totalEncodedFields24zgensym_539c1932b884c479_25, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft24zgensym_539c1932b884c479_25 := totalEncodedFields24zgensym_539c1932b884c479_25
	missingFieldsLeft24zgensym_539c1932b884c479_25 := maxFields24zgensym_539c1932b884c479_25 - totalEncodedFields24zgensym_539c1932b884c479_25

	var nextMiss24zgensym_539c1932b884c479_25 int32 = -1
	var found24zgensym_539c1932b884c479_25 [maxFields24zgensym_539c1932b884c479_25]bool
	var curField24zgensym_539c1932b884c479_25 string

doneWithStruct24zgensym_539c1932b884c479_25:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft24zgensym_539c1932b884c479_25 > 0 || missingFieldsLeft24zgensym_539c1932b884c479_25 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft24zgensym_539c1932b884c479_25, missingFieldsLeft24zgensym_539c1932b884c479_25, msgp.ShowFound(found24zgensym_539c1932b884c479_25[:]), decodeMsgFieldOrder24zgensym_539c1932b884c479_25)
		if encodedFieldsLeft24zgensym_539c1932b884c479_25 > 0 {
			encodedFieldsLeft24zgensym_539c1932b884c479_25--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField24zgensym_539c1932b884c479_25 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss24zgensym_539c1932b884c479_25 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss24zgensym_539c1932b884c479_25 = 0
			}
			for nextMiss24zgensym_539c1932b884c479_25 < maxFields24zgensym_539c1932b884c479_25 && (found24zgensym_539c1932b884c479_25[nextMiss24zgensym_539c1932b884c479_25] || decodeMsgFieldSkip24zgensym_539c1932b884c479_25[nextMiss24zgensym_539c1932b884c479_25]) {
				nextMiss24zgensym_539c1932b884c479_25++
			}
			if nextMiss24zgensym_539c1932b884c479_25 == maxFields24zgensym_539c1932b884c479_25 {
				// filled all the empty fields!
				break doneWithStruct24zgensym_539c1932b884c479_25
			}
			missingFieldsLeft24zgensym_539c1932b884c479_25--
			curField24zgensym_539c1932b884c479_25 = decodeMsgFieldOrder24zgensym_539c1932b884c479_25[nextMiss24zgensym_539c1932b884c479_25]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField24zgensym_539c1932b884c479_25)
		switch curField24zgensym_539c1932b884c479_25 {
		// -- templateDecodeMsg ends here --

		case "freq_zid00_ptr":
			found24zgensym_539c1932b884c479_25[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.freq != nil {
					dc.PushAlwaysNil()
					err = z.freq.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.freq == nil {
					z.freq = new(cmSketch)
				}
				dc.DedupIndexEachPtr(z.freq)

				err = z.freq.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "door_zid01_ptr":
			found24zgensym_539c1932b884c479_25[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.door != nil {
					dc.PushAlwaysNil()
					err = z.door.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.door == nil {
					z.door = new(zExp.Bloom)
				}
				dc.DedupIndexEachPtr(z.door)

				err = z.door.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "incrs_zid02_i64":
			found24zgensym_539c1932b884c479_25[2] = true
			z.incrs, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "resetAt_zid03_i64":
			found24zgensym_539c1932b884c479_25[3] = true
			z.resetAt, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss24zgensym_539c1932b884c479_25 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of tinyLFU
var decodeMsgFieldOrder24zgensym_539c1932b884c479_25 = []string{"freq_zid00_ptr", "door_zid01_ptr", "incrs_zid02_i64", "resetAt_zid03_i64"}

var decodeMsgFieldSkip24zgensym_539c1932b884c479_25 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *tinyLFU) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.freq == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.door == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.incrs == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.resetAt == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *tinyLFU) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_539c1932b884c479_26 [4]bool
	fieldsInUse_zgensym_539c1932b884c479_27 := z.fieldsNotEmpty(empty_zgensym_539c1932b884c479_26[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_539c1932b884c479_27 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'tinyLFU'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x74, 0x69, 0x6e, 0x79, 0x4c, 0x46, 0x55})
	if err != nil {
		return err
	}

	if !empty_zgensym_539c1932b884c479_26[0] {
		// write "freq_zid00_ptr"
		err = en.Append(0xae, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.freq == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.freq)
			if err != nil {
				return
			}
			if !dup {
				err = z.freq.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_539c1932b884c479_26[1] {
		// write "door_zid01_ptr"
		err = en.Append(0xae, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.door == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.door)
			if err != nil {
				return
			}
			if !dup {
				err = z.door.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_539c1932b884c479_26[2] {
		// write "incrs_zid02_i64"
		err = en.Append(0xaf, 0x69, 0x6e, 0x63, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.incrs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_539c1932b884c479_26[3] {
		// write "resetAt_zid03_i64"
		err = en.Append(0xb1, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.resetAt)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *tinyLFU) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "freq_zid00_ptr"
		o = append(o, 0xae, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.freq == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.freq.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "door_zid01_ptr"
		o = append(o, 0xae, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.door == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.door.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "incrs_zid02_i64"
		o = append(o, 0xaf, 0x69, 0x6e, 0x63, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.incrs)
	}

	if !empty[3] {
		// string "resetAt_zid03_i64"
		o = append(o, 0xb1, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.resetAt)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *tinyLFU) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *tinyLFU) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields28zgensym_539c1932b884c479_29 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields28zgensym_539c1932b884c479_29 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields28zgensym_539c1932b884c479_29, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft28zgensym_539c1932b884c479_29 := totalEncodedFields28zgensym_539c1932b884c479_29
	missingFieldsLeft28zgensym_539c1932b884c479_29 := maxFields28zgensym_539c1932b884c479_29 - totalEncodedFields28zgensym_539c1932b884c479_29

	var nextMiss28zgensym_539c1932b884c479_29 int32 = -1
	var found28zgensym_539c1932b884c479_29 [maxFields28zgensym_539c1932b884c479_29]bool
	var curField28zgensym_539c1932b884c479_29 string

doneWithStruct28zgensym_539c1932b884c479_29:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft28zgensym_539c1932b884c479_29 > 0 || missingFieldsLeft28zgensym_539c1932b884c479_29 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft28zgensym_539c1932b884c479_29, missingFieldsLeft28zgensym_539c1932b884c479_29, msgp.ShowFound(found28zgensym_539c1932b884c479_29[:]), unmarshalMsgFieldOrder28zgensym_539c1932b884c479_29)
		if encodedFieldsLeft28zgensym_539c1932b884c479_29 > 0 {
			encodedFieldsLeft28zgensym_539c1932b884c479_29--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField28zgensym_539c1932b884c479_29 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss28zgensym_539c1932b884c479_29 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss28zgensym_539c1932b884c479_29 = 0
			}
			for nextMiss28zgensym_539c1932b884c479_29 < maxFields28zgensym_539c1932b884c479_29 && (found28zgensym_539c1932b884c479_29[nextMiss28zgensym_539c1932b884c479_29] || unmarshalMsgFieldSkip28zgensym_539c1932b884c479_29[nextMiss28zgensym_539c1932b884c479_29]) {
				nextMiss28zgensym_539c1932b884c479_29++
			}
			if nextMiss28zgensym_539c1932b884c479_29 == maxFields28zgensym_539c1932b884c479_29 {
				// filled all the empty fields!
				break doneWithStruct28zgensym_539c1932b884c479_29
			}
			missingFieldsLeft28zgensym_539c1932b884c479_29--
			curField28zgensym_539c1932b884c479_29 = unmarshalMsgFieldOrder28zgensym_539c1932b884c479_29[nextMiss28zgensym_539c1932b884c479_29]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField28zgensym_539c1932b884c479_29)
		switch curField28zgensym_539c1932b884c479_29 {
		// -- templateUnmarshalMsg ends here --

		case "freq_zid00_ptr":
			found28zgensym_539c1932b884c479_29[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.freq", alias:"cmSketch", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.freq != nil {
					z.freq.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.freq {
						z.freq.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.freq == nil {
						z.freq = new(cmSketch)
					}

					bts, err = z.freq.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "door_zid01_ptr":
			found28zgensym_539c1932b884c479_29[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.door", alias:"z.Bloom", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:true, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.door != nil {
					z.door.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.door {
						z.door.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.door == nil {
						z.door = new(zExp.Bloom)
					}

					bts, err = z.door.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "incrs_zid02_i64":
			found28zgensym_539c1932b884c479_29[2] = true
			z.incrs, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "resetAt_zid03_i64":
			found28zgensym_539c1932b884c479_29[3] = true
			z.resetAt, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss28zgensym_539c1932b884c479_29 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of tinyLFU
var unmarshalMsgFieldOrder28zgensym_539c1932b884c479_29 = []string{"freq_zid00_ptr", "door_zid01_ptr", "incrs_zid02_i64", "resetAt_zid03_i64"}

var unmarshalMsgFieldSkip28zgensym_539c1932b884c479_29 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *tinyLFU) Msgsize() (s int) {
	s = 1 + 15
	if z.freq == nil {
		s += msgp.NilSize
	} else {
		s += z.freq.Msgsize()
	}
	s += 15
	if z.door == nil {
		s += msgp.NilSize
	} else {
		s += z.door.Msgsize()
	}
	s += 16 + msgp.Int64Size + 18 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *tinyLFUExport) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields30zgensym_539c1932b884c479_31 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields30zgensym_539c1932b884c479_31 uint32
	totalEncodedFields30zgensym_539c1932b884c479_31, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft30zgensym_539c1932b884c479_31 := totalEncodedFields30zgensym_539c1932b884c479_31
	missingFieldsLeft30zgensym_539c1932b884c479_31 := maxFields30zgensym_539c1932b884c479_31 - totalEncodedFields30zgensym_539c1932b884c479_31

	var nextMiss30zgensym_539c1932b884c479_31 int32 = -1
	var found30zgensym_539c1932b884c479_31 [maxFields30zgensym_539c1932b884c479_31]bool
	var curField30zgensym_539c1932b884c479_31 string

doneWithStruct30zgensym_539c1932b884c479_31:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft30zgensym_539c1932b884c479_31 > 0 || missingFieldsLeft30zgensym_539c1932b884c479_31 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft30zgensym_539c1932b884c479_31, missingFieldsLeft30zgensym_539c1932b884c479_31, msgp.ShowFound(found30zgensym_539c1932b884c479_31[:]), decodeMsgFieldOrder30zgensym_539c1932b884c479_31)
		if encodedFieldsLeft30zgensym_539c1932b884c479_31 > 0 {
			encodedFieldsLeft30zgensym_539c1932b884c479_31--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField30zgensym_539c1932b884c479_31 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss30zgensym_539c1932b884c479_31 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss30zgensym_539c1932b884c479_31 = 0
			}
			for nextMiss30zgensym_539c1932b884c479_31 < maxFields30zgensym_539c1932b884c479_31 && (found30zgensym_539c1932b884c479_31[nextMiss30zgensym_539c1932b884c479_31] || decodeMsgFieldSkip30zgensym_539c1932b884c479_31[nextMiss30zgensym_539c1932b884c479_31]) {
				nextMiss30zgensym_539c1932b884c479_31++
			}
			if nextMiss30zgensym_539c1932b884c479_31 == maxFields30zgensym_539c1932b884c479_31 {
				// filled all the empty fields!
				break doneWithStruct30zgensym_539c1932b884c479_31
			}
			missingFieldsLeft30zgensym_539c1932b884c479_31--
			curField30zgensym_539c1932b884c479_31 = decodeMsgFieldOrder30zgensym_539c1932b884c479_31[nextMiss30zgensym_539c1932b884c479_31]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField30zgensym_539c1932b884c479_31)
		switch curField30zgensym_539c1932b884c479_31 {
		// -- templateDecodeMsg ends here --

		case "Freq_zid00_ptr":
			found30zgensym_539c1932b884c479_31[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Freq != nil {
					dc.PushAlwaysNil()
					err = z.Freq.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Freq == nil {
					z.Freq = new(cmSketchExport)
				}
				dc.DedupIndexEachPtr(z.Freq)

				err = z.Freq.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Door_zid01_ptr":
			found30zgensym_539c1932b884c479_31[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Door != nil {
					dc.PushAlwaysNil()
					err = z.Door.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Door == nil {
					z.Door = new(zExp.BloomExport)
				}
				dc.DedupIndexEachPtr(z.Door)

				err = z.Door.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Incrs_zid02_i64":
			found30zgensym_539c1932b884c479_31[2] = true
			z.Incrs, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ResetAt_zid03_i64":
			found30zgensym_539c1932b884c479_31[3] = true
			z.ResetAt, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss30zgensym_539c1932b884c479_31 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of tinyLFUExport
var decodeMsgFieldOrder30zgensym_539c1932b884c479_31 = []string{"Freq_zid00_ptr", "Door_zid01_ptr", "Incrs_zid02_i64", "ResetAt_zid03_i64"}

var decodeMsgFieldSkip30zgensym_539c1932b884c479_31 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *tinyLFUExport) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.Freq == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Door == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Incrs == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ResetAt == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *tinyLFUExport) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_539c1932b884c479_32 [4]bool
	fieldsInUse_zgensym_539c1932b884c479_33 := z.fieldsNotEmpty(empty_zgensym_539c1932b884c479_32[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_539c1932b884c479_33 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'tinyLFUExport'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x74, 0x69, 0x6e, 0x79, 0x4c, 0x46, 0x55, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_539c1932b884c479_32[0] {
		// write "Freq_zid00_ptr"
		err = en.Append(0xae, 0x46, 0x72, 0x65, 0x71, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Freq == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Freq)
			if err != nil {
				return
			}
			if !dup {
				err = z.Freq.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_539c1932b884c479_32[1] {
		// write "Door_zid01_ptr"
		err = en.Append(0xae, 0x44, 0x6f, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Door == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Door)
			if err != nil {
				return
			}
			if !dup {
				err = z.Door.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_539c1932b884c479_32[2] {
		// write "Incrs_zid02_i64"
		err = en.Append(0xaf, 0x49, 0x6e, 0x63, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Incrs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_539c1932b884c479_32[3] {
		// write "ResetAt_zid03_i64"
		err = en.Append(0xb1, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ResetAt)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *tinyLFUExport) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Freq_zid00_ptr"
		o = append(o, 0xae, 0x46, 0x72, 0x65, 0x71, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Freq == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Freq.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "Door_zid01_ptr"
		o = append(o, 0xae, 0x44, 0x6f, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Door == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Door.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "Incrs_zid02_i64"
		o = append(o, 0xaf, 0x49, 0x6e, 0x63, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Incrs)
	}

	if !empty[3] {
		// string "ResetAt_zid03_i64"
		o = append(o, 0xb1, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ResetAt)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *tinyLFUExport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *tinyLFUExport) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields34zgensym_539c1932b884c479_35 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields34zgensym_539c1932b884c479_35 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields34zgensym_539c1932b884c479_35, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft34zgensym_539c1932b884c479_35 := totalEncodedFields34zgensym_539c1932b884c479_35
	missingFieldsLeft34zgensym_539c1932b884c479_35 := maxFields34zgensym_539c1932b884c479_35 - totalEncodedFields34zgensym_539c1932b884c479_35

	var nextMiss34zgensym_539c1932b884c479_35 int32 = -1
	var found34zgensym_539c1932b884c479_35 [maxFields34zgensym_539c1932b884c479_35]bool
	var curField34zgensym_539c1932b884c479_35 string

doneWithStruct34zgensym_539c1932b884c479_35:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft34zgensym_539c1932b884c479_35 > 0 || missingFieldsLeft34zgensym_539c1932b884c479_35 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft34zgensym_539c1932b884c479_35, missingFieldsLeft34zgensym_539c1932b884c479_35, msgp.ShowFound(found34zgensym_539c1932b884c479_35[:]), unmarshalMsgFieldOrder34zgensym_539c1932b884c479_35)
		if encodedFieldsLeft34zgensym_539c1932b884c479_35 > 0 {
			encodedFieldsLeft34zgensym_539c1932b884c479_35--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField34zgensym_539c1932b884c479_35 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss34zgensym_539c1932b884c479_35 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss34zgensym_539c1932b884c479_35 = 0
			}
			for nextMiss34zgensym_539c1932b884c479_35 < maxFields34zgensym_539c1932b884c479_35 && (found34zgensym_539c1932b884c479_35[nextMiss34zgensym_539c1932b884c479_35] || unmarshalMsgFieldSkip34zgensym_539c1932b884c479_35[nextMiss34zgensym_539c1932b884c479_35]) {
				nextMiss34zgensym_539c1932b884c479_35++
			}
			if nextMiss34zgensym_539c1932b884c479_35 == maxFields34zgensym_539c1932b884c479_35 {
				// filled all the empty fields!
				break doneWithStruct34zgensym_539c1932b884c479_35
			}
			missingFieldsLeft34zgensym_539c1932b884c479_35--
			curField34zgensym_539c1932b884c479_35 = unmarshalMsgFieldOrder34zgensym_539c1932b884c479_35[nextMiss34zgensym_539c1932b884c479_35]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField34zgensym_539c1932b884c479_35)
		switch curField34zgensym_539c1932b884c479_35 {
		// -- templateUnmarshalMsg ends here --

		case "Freq_zid00_ptr":
			found34zgensym_539c1932b884c479_35[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Freq", alias:"cmSketchExport", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Freq != nil {
					z.Freq.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Freq {
						z.Freq.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Freq == nil {
						z.Freq = new(cmSketchExport)
					}

					bts, err = z.Freq.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Door_zid01_ptr":
			found34zgensym_539c1932b884c479_35[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Door", alias:"z.BloomExport", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:true, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Door != nil {
					z.Door.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Door {
						z.Door.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Door == nil {
						z.Door = new(zExp.BloomExport)
					}

					bts, err = z.Door.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Incrs_zid02_i64":
			found34zgensym_539c1932b884c479_35[2] = true
			z.Incrs, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ResetAt_zid03_i64":
			found34zgensym_539c1932b884c479_35[3] = true
			z.ResetAt, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss34zgensym_539c1932b884c479_35 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of tinyLFUExport
var unmarshalMsgFieldOrder34zgensym_539c1932b884c479_35 = []string{"Freq_zid00_ptr", "Door_zid01_ptr", "Incrs_zid02_i64", "ResetAt_zid03_i64"}

var unmarshalMsgFieldSkip34zgensym_539c1932b884c479_35 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *tinyLFUExport) Msgsize() (s int) {
	s = 1 + 15
	if z.Freq == nil {
		s += msgp.NilSize
	} else {
		s += z.Freq.Msgsize()
	}
	s += 15
	if z.Door == nil {
		s += msgp.NilSize
	} else {
		s += z.Door.Msgsize()
	}
	s += 16 + msgp.Int64Size + 18 + msgp.Int64Size
	return
}
