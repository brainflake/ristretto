// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package ristretto

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *cmRow) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_e0d2176755225beb_0 []byte
		zgensym_e0d2176755225beb_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = cmRow(zgensym_e0d2176755225beb_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z cmRow) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z cmRow) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *cmRow) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *cmRow) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_e0d2176755225beb_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_e0d2176755225beb_1 = zgensym_e0d2176755225beb_1[:0]
		} else {
			zgensym_e0d2176755225beb_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = cmRow(zgensym_e0d2176755225beb_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z cmRow) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *cmSketch) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields4zgensym_e0d2176755225beb_5 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields4zgensym_e0d2176755225beb_5 uint32
	totalEncodedFields4zgensym_e0d2176755225beb_5, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft4zgensym_e0d2176755225beb_5 := totalEncodedFields4zgensym_e0d2176755225beb_5
	missingFieldsLeft4zgensym_e0d2176755225beb_5 := maxFields4zgensym_e0d2176755225beb_5 - totalEncodedFields4zgensym_e0d2176755225beb_5

	var nextMiss4zgensym_e0d2176755225beb_5 int32 = -1
	var found4zgensym_e0d2176755225beb_5 [maxFields4zgensym_e0d2176755225beb_5]bool
	var curField4zgensym_e0d2176755225beb_5 string

doneWithStruct4zgensym_e0d2176755225beb_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_e0d2176755225beb_5 > 0 || missingFieldsLeft4zgensym_e0d2176755225beb_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_e0d2176755225beb_5, missingFieldsLeft4zgensym_e0d2176755225beb_5, msgp.ShowFound(found4zgensym_e0d2176755225beb_5[:]), decodeMsgFieldOrder4zgensym_e0d2176755225beb_5)
		if encodedFieldsLeft4zgensym_e0d2176755225beb_5 > 0 {
			encodedFieldsLeft4zgensym_e0d2176755225beb_5--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField4zgensym_e0d2176755225beb_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_e0d2176755225beb_5 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss4zgensym_e0d2176755225beb_5 = 0
			}
			for nextMiss4zgensym_e0d2176755225beb_5 < maxFields4zgensym_e0d2176755225beb_5 && (found4zgensym_e0d2176755225beb_5[nextMiss4zgensym_e0d2176755225beb_5] || decodeMsgFieldSkip4zgensym_e0d2176755225beb_5[nextMiss4zgensym_e0d2176755225beb_5]) {
				nextMiss4zgensym_e0d2176755225beb_5++
			}
			if nextMiss4zgensym_e0d2176755225beb_5 == maxFields4zgensym_e0d2176755225beb_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_e0d2176755225beb_5
			}
			missingFieldsLeft4zgensym_e0d2176755225beb_5--
			curField4zgensym_e0d2176755225beb_5 = decodeMsgFieldOrder4zgensym_e0d2176755225beb_5[nextMiss4zgensym_e0d2176755225beb_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_e0d2176755225beb_5)
		switch curField4zgensym_e0d2176755225beb_5 {
		// -- templateDecodeMsg ends here --

		case "rows_zid00_ary":
			found4zgensym_e0d2176755225beb_5[0] = true
			if dc.AlwaysNil {
				// nothing more here
			} else if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
			} else {

				var zgensym_e0d2176755225beb_6 uint32
				zgensym_e0d2176755225beb_6, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if !dc.IsNil() && zgensym_e0d2176755225beb_6 != cmDepth {
					err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_6}
					return
				}
			}
			for zgensym_e0d2176755225beb_2 := range z.rows {
				{
					var zgensym_e0d2176755225beb_7 []byte
					zgensym_e0d2176755225beb_7, err = dc.ReadBytes([]byte(z.rows[zgensym_e0d2176755225beb_2]))
					z.rows[zgensym_e0d2176755225beb_2] = cmRow(zgensym_e0d2176755225beb_7)
				}
				if err != nil {
					return
				}
			}
		case "seed_zid01_ary":
			found4zgensym_e0d2176755225beb_5[1] = true
			if dc.AlwaysNil {
				// nothing more here
			} else if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
			} else {

				var zgensym_e0d2176755225beb_8 uint32
				zgensym_e0d2176755225beb_8, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if !dc.IsNil() && zgensym_e0d2176755225beb_8 != cmDepth {
					err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_8}
					return
				}
			}
			for zgensym_e0d2176755225beb_3 := range z.seed {
				z.seed[zgensym_e0d2176755225beb_3], err = dc.ReadUint64()
				if err != nil {
					return
				}
			}
		case "mask_zid02_u64":
			found4zgensym_e0d2176755225beb_5[2] = true
			z.mask, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_e0d2176755225beb_5 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of cmSketch
var decodeMsgFieldOrder4zgensym_e0d2176755225beb_5 = []string{"rows_zid00_ary", "seed_zid01_ary", "mask_zid02_u64"}

var decodeMsgFieldSkip4zgensym_e0d2176755225beb_5 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *cmSketch) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.rows) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.seed) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.mask == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *cmSketch) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e0d2176755225beb_9 [3]bool
	fieldsInUse_zgensym_e0d2176755225beb_10 := z.fieldsNotEmpty(empty_zgensym_e0d2176755225beb_9[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e0d2176755225beb_10 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'cmSketch'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x63, 0x6d, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68})
	if err != nil {
		return err
	}

	if !empty_zgensym_e0d2176755225beb_9[0] {
		// write "rows_zid00_ary"
		err = en.Append(0xae, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x61, 0x72, 0x79)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(cmDepth)
		if err != nil {
			return
		}
		for zgensym_e0d2176755225beb_2 := range z.rows {
			err = en.WriteBytes([]byte(z.rows[zgensym_e0d2176755225beb_2]))
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_e0d2176755225beb_9[1] {
		// write "seed_zid01_ary"
		err = en.Append(0xae, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x61, 0x72, 0x79)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(cmDepth)
		if err != nil {
			return
		}
		for zgensym_e0d2176755225beb_3 := range z.seed {
			err = en.WriteUint64(z.seed[zgensym_e0d2176755225beb_3])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_e0d2176755225beb_9[2] {
		// write "mask_zid02_u64"
		err = en.Append(0xae, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.mask)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *cmSketch) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "rows_zid00_ary"
		o = append(o, 0xae, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, cmDepth)
		for zgensym_e0d2176755225beb_2 := range z.rows {
			o = msgp.AppendBytes(o, []byte(z.rows[zgensym_e0d2176755225beb_2]))
		}
	}

	if !empty[1] {
		// string "seed_zid01_ary"
		o = append(o, 0xae, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, cmDepth)
		for zgensym_e0d2176755225beb_3 := range z.seed {
			o = msgp.AppendUint64(o, z.seed[zgensym_e0d2176755225beb_3])
		}
	}

	if !empty[2] {
		// string "mask_zid02_u64"
		o = append(o, 0xae, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.mask)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *cmSketch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *cmSketch) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields11zgensym_e0d2176755225beb_12 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields11zgensym_e0d2176755225beb_12 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields11zgensym_e0d2176755225beb_12, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft11zgensym_e0d2176755225beb_12 := totalEncodedFields11zgensym_e0d2176755225beb_12
	missingFieldsLeft11zgensym_e0d2176755225beb_12 := maxFields11zgensym_e0d2176755225beb_12 - totalEncodedFields11zgensym_e0d2176755225beb_12

	var nextMiss11zgensym_e0d2176755225beb_12 int32 = -1
	var found11zgensym_e0d2176755225beb_12 [maxFields11zgensym_e0d2176755225beb_12]bool
	var curField11zgensym_e0d2176755225beb_12 string

doneWithStruct11zgensym_e0d2176755225beb_12:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft11zgensym_e0d2176755225beb_12 > 0 || missingFieldsLeft11zgensym_e0d2176755225beb_12 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft11zgensym_e0d2176755225beb_12, missingFieldsLeft11zgensym_e0d2176755225beb_12, msgp.ShowFound(found11zgensym_e0d2176755225beb_12[:]), unmarshalMsgFieldOrder11zgensym_e0d2176755225beb_12)
		if encodedFieldsLeft11zgensym_e0d2176755225beb_12 > 0 {
			encodedFieldsLeft11zgensym_e0d2176755225beb_12--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField11zgensym_e0d2176755225beb_12 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss11zgensym_e0d2176755225beb_12 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss11zgensym_e0d2176755225beb_12 = 0
			}
			for nextMiss11zgensym_e0d2176755225beb_12 < maxFields11zgensym_e0d2176755225beb_12 && (found11zgensym_e0d2176755225beb_12[nextMiss11zgensym_e0d2176755225beb_12] || unmarshalMsgFieldSkip11zgensym_e0d2176755225beb_12[nextMiss11zgensym_e0d2176755225beb_12]) {
				nextMiss11zgensym_e0d2176755225beb_12++
			}
			if nextMiss11zgensym_e0d2176755225beb_12 == maxFields11zgensym_e0d2176755225beb_12 {
				// filled all the empty fields!
				break doneWithStruct11zgensym_e0d2176755225beb_12
			}
			missingFieldsLeft11zgensym_e0d2176755225beb_12--
			curField11zgensym_e0d2176755225beb_12 = unmarshalMsgFieldOrder11zgensym_e0d2176755225beb_12[nextMiss11zgensym_e0d2176755225beb_12]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField11zgensym_e0d2176755225beb_12)
		switch curField11zgensym_e0d2176755225beb_12 {
		// -- templateUnmarshalMsg ends here --

		case "rows_zid00_ary":
			found11zgensym_e0d2176755225beb_12[0] = true
			var zgensym_e0d2176755225beb_13 uint32
			zgensym_e0d2176755225beb_13, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_e0d2176755225beb_13 != cmDepth {
				err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_13}
				return
			}
			for zgensym_e0d2176755225beb_2 := range z.rows {
				{
					var zgensym_e0d2176755225beb_14 []byte
					if nbs.AlwaysNil || msgp.IsNil(bts) {
						if !nbs.AlwaysNil {
							bts = bts[1:]
						}
						zgensym_e0d2176755225beb_14 = zgensym_e0d2176755225beb_14[:0]
					} else {
						zgensym_e0d2176755225beb_14, bts, err = nbs.ReadBytesBytes(bts, []byte(z.rows[zgensym_e0d2176755225beb_2]))

						if err != nil {
							return
						}
					}
					if err != nil {
						return
					}
					z.rows[zgensym_e0d2176755225beb_2] = cmRow(zgensym_e0d2176755225beb_14)
				}
			}
		case "seed_zid01_ary":
			found11zgensym_e0d2176755225beb_12[1] = true
			var zgensym_e0d2176755225beb_15 uint32
			zgensym_e0d2176755225beb_15, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_e0d2176755225beb_15 != cmDepth {
				err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_15}
				return
			}
			for zgensym_e0d2176755225beb_3 := range z.seed {
				z.seed[zgensym_e0d2176755225beb_3], bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
			}
		case "mask_zid02_u64":
			found11zgensym_e0d2176755225beb_12[2] = true
			z.mask, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss11zgensym_e0d2176755225beb_12 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of cmSketch
var unmarshalMsgFieldOrder11zgensym_e0d2176755225beb_12 = []string{"rows_zid00_ary", "seed_zid01_ary", "mask_zid02_u64"}

var unmarshalMsgFieldSkip11zgensym_e0d2176755225beb_12 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *cmSketch) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_e0d2176755225beb_2 := range z.rows {
		s += msgp.BytesPrefixSize + len([]byte(z.rows[zgensym_e0d2176755225beb_2]))
	}
	s += 15 + msgp.ArrayHeaderSize + (cmDepth * (msgp.Uint64Size)) + 15 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *cmSketchExport) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields18zgensym_e0d2176755225beb_19 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields18zgensym_e0d2176755225beb_19 uint32
	totalEncodedFields18zgensym_e0d2176755225beb_19, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft18zgensym_e0d2176755225beb_19 := totalEncodedFields18zgensym_e0d2176755225beb_19
	missingFieldsLeft18zgensym_e0d2176755225beb_19 := maxFields18zgensym_e0d2176755225beb_19 - totalEncodedFields18zgensym_e0d2176755225beb_19

	var nextMiss18zgensym_e0d2176755225beb_19 int32 = -1
	var found18zgensym_e0d2176755225beb_19 [maxFields18zgensym_e0d2176755225beb_19]bool
	var curField18zgensym_e0d2176755225beb_19 string

doneWithStruct18zgensym_e0d2176755225beb_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_e0d2176755225beb_19 > 0 || missingFieldsLeft18zgensym_e0d2176755225beb_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_e0d2176755225beb_19, missingFieldsLeft18zgensym_e0d2176755225beb_19, msgp.ShowFound(found18zgensym_e0d2176755225beb_19[:]), decodeMsgFieldOrder18zgensym_e0d2176755225beb_19)
		if encodedFieldsLeft18zgensym_e0d2176755225beb_19 > 0 {
			encodedFieldsLeft18zgensym_e0d2176755225beb_19--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField18zgensym_e0d2176755225beb_19 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss18zgensym_e0d2176755225beb_19 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss18zgensym_e0d2176755225beb_19 = 0
			}
			for nextMiss18zgensym_e0d2176755225beb_19 < maxFields18zgensym_e0d2176755225beb_19 && (found18zgensym_e0d2176755225beb_19[nextMiss18zgensym_e0d2176755225beb_19] || decodeMsgFieldSkip18zgensym_e0d2176755225beb_19[nextMiss18zgensym_e0d2176755225beb_19]) {
				nextMiss18zgensym_e0d2176755225beb_19++
			}
			if nextMiss18zgensym_e0d2176755225beb_19 == maxFields18zgensym_e0d2176755225beb_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_e0d2176755225beb_19
			}
			missingFieldsLeft18zgensym_e0d2176755225beb_19--
			curField18zgensym_e0d2176755225beb_19 = decodeMsgFieldOrder18zgensym_e0d2176755225beb_19[nextMiss18zgensym_e0d2176755225beb_19]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_e0d2176755225beb_19)
		switch curField18zgensym_e0d2176755225beb_19 {
		// -- templateDecodeMsg ends here --

		case "Rows__ary":
			found18zgensym_e0d2176755225beb_19[0] = true
			if dc.AlwaysNil {
				// nothing more here
			} else if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
			} else {

				var zgensym_e0d2176755225beb_20 uint32
				zgensym_e0d2176755225beb_20, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if !dc.IsNil() && zgensym_e0d2176755225beb_20 != cmDepth {
					err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_20}
					return
				}
			}
			for zgensym_e0d2176755225beb_16 := range z.Rows {
				{
					var zgensym_e0d2176755225beb_21 []byte
					zgensym_e0d2176755225beb_21, err = dc.ReadBytes([]byte(z.Rows[zgensym_e0d2176755225beb_16]))
					z.Rows[zgensym_e0d2176755225beb_16] = cmRow(zgensym_e0d2176755225beb_21)
				}
				if err != nil {
					return
				}
			}
		case "Seed__ary":
			found18zgensym_e0d2176755225beb_19[1] = true
			if dc.AlwaysNil {
				// nothing more here
			} else if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
			} else {

				var zgensym_e0d2176755225beb_22 uint32
				zgensym_e0d2176755225beb_22, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if !dc.IsNil() && zgensym_e0d2176755225beb_22 != cmDepth {
					err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_22}
					return
				}
			}
			for zgensym_e0d2176755225beb_17 := range z.Seed {
				z.Seed[zgensym_e0d2176755225beb_17], err = dc.ReadUint64()
				if err != nil {
					return
				}
			}
		case "Mask__u64":
			found18zgensym_e0d2176755225beb_19[2] = true
			z.Mask, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_e0d2176755225beb_19 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of cmSketchExport
var decodeMsgFieldOrder18zgensym_e0d2176755225beb_19 = []string{"Rows__ary", "Seed__ary", "Mask__u64"}

var decodeMsgFieldSkip18zgensym_e0d2176755225beb_19 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *cmSketchExport) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.Rows) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Seed) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Mask == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *cmSketchExport) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e0d2176755225beb_23 [3]bool
	fieldsInUse_zgensym_e0d2176755225beb_24 := z.fieldsNotEmpty(empty_zgensym_e0d2176755225beb_23[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e0d2176755225beb_24 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'cmSketchExport'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x63, 0x6d, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_e0d2176755225beb_23[0] {
		// write "Rows__ary"
		err = en.Append(0xa9, 0x52, 0x6f, 0x77, 0x73, 0x5f, 0x5f, 0x61, 0x72, 0x79)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(cmDepth)
		if err != nil {
			return
		}
		for zgensym_e0d2176755225beb_16 := range z.Rows {
			err = en.WriteBytes([]byte(z.Rows[zgensym_e0d2176755225beb_16]))
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_e0d2176755225beb_23[1] {
		// write "Seed__ary"
		err = en.Append(0xa9, 0x53, 0x65, 0x65, 0x64, 0x5f, 0x5f, 0x61, 0x72, 0x79)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(cmDepth)
		if err != nil {
			return
		}
		for zgensym_e0d2176755225beb_17 := range z.Seed {
			err = en.WriteUint64(z.Seed[zgensym_e0d2176755225beb_17])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_e0d2176755225beb_23[2] {
		// write "Mask__u64"
		err = en.Append(0xa9, 0x4d, 0x61, 0x73, 0x6b, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Mask)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *cmSketchExport) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Rows__ary"
		o = append(o, 0xa9, 0x52, 0x6f, 0x77, 0x73, 0x5f, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, cmDepth)
		for zgensym_e0d2176755225beb_16 := range z.Rows {
			o = msgp.AppendBytes(o, []byte(z.Rows[zgensym_e0d2176755225beb_16]))
		}
	}

	if !empty[1] {
		// string "Seed__ary"
		o = append(o, 0xa9, 0x53, 0x65, 0x65, 0x64, 0x5f, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, cmDepth)
		for zgensym_e0d2176755225beb_17 := range z.Seed {
			o = msgp.AppendUint64(o, z.Seed[zgensym_e0d2176755225beb_17])
		}
	}

	if !empty[2] {
		// string "Mask__u64"
		o = append(o, 0xa9, 0x4d, 0x61, 0x73, 0x6b, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Mask)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *cmSketchExport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *cmSketchExport) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_e0d2176755225beb_26 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields25zgensym_e0d2176755225beb_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_e0d2176755225beb_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_e0d2176755225beb_26 := totalEncodedFields25zgensym_e0d2176755225beb_26
	missingFieldsLeft25zgensym_e0d2176755225beb_26 := maxFields25zgensym_e0d2176755225beb_26 - totalEncodedFields25zgensym_e0d2176755225beb_26

	var nextMiss25zgensym_e0d2176755225beb_26 int32 = -1
	var found25zgensym_e0d2176755225beb_26 [maxFields25zgensym_e0d2176755225beb_26]bool
	var curField25zgensym_e0d2176755225beb_26 string

doneWithStruct25zgensym_e0d2176755225beb_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_e0d2176755225beb_26 > 0 || missingFieldsLeft25zgensym_e0d2176755225beb_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_e0d2176755225beb_26, missingFieldsLeft25zgensym_e0d2176755225beb_26, msgp.ShowFound(found25zgensym_e0d2176755225beb_26[:]), unmarshalMsgFieldOrder25zgensym_e0d2176755225beb_26)
		if encodedFieldsLeft25zgensym_e0d2176755225beb_26 > 0 {
			encodedFieldsLeft25zgensym_e0d2176755225beb_26--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField25zgensym_e0d2176755225beb_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_e0d2176755225beb_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_e0d2176755225beb_26 = 0
			}
			for nextMiss25zgensym_e0d2176755225beb_26 < maxFields25zgensym_e0d2176755225beb_26 && (found25zgensym_e0d2176755225beb_26[nextMiss25zgensym_e0d2176755225beb_26] || unmarshalMsgFieldSkip25zgensym_e0d2176755225beb_26[nextMiss25zgensym_e0d2176755225beb_26]) {
				nextMiss25zgensym_e0d2176755225beb_26++
			}
			if nextMiss25zgensym_e0d2176755225beb_26 == maxFields25zgensym_e0d2176755225beb_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_e0d2176755225beb_26
			}
			missingFieldsLeft25zgensym_e0d2176755225beb_26--
			curField25zgensym_e0d2176755225beb_26 = unmarshalMsgFieldOrder25zgensym_e0d2176755225beb_26[nextMiss25zgensym_e0d2176755225beb_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_e0d2176755225beb_26)
		switch curField25zgensym_e0d2176755225beb_26 {
		// -- templateUnmarshalMsg ends here --

		case "Rows__ary":
			found25zgensym_e0d2176755225beb_26[0] = true
			var zgensym_e0d2176755225beb_27 uint32
			zgensym_e0d2176755225beb_27, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_e0d2176755225beb_27 != cmDepth {
				err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_27}
				return
			}
			for zgensym_e0d2176755225beb_16 := range z.Rows {
				{
					var zgensym_e0d2176755225beb_28 []byte
					if nbs.AlwaysNil || msgp.IsNil(bts) {
						if !nbs.AlwaysNil {
							bts = bts[1:]
						}
						zgensym_e0d2176755225beb_28 = zgensym_e0d2176755225beb_28[:0]
					} else {
						zgensym_e0d2176755225beb_28, bts, err = nbs.ReadBytesBytes(bts, []byte(z.Rows[zgensym_e0d2176755225beb_16]))

						if err != nil {
							return
						}
					}
					if err != nil {
						return
					}
					z.Rows[zgensym_e0d2176755225beb_16] = cmRow(zgensym_e0d2176755225beb_28)
				}
			}
		case "Seed__ary":
			found25zgensym_e0d2176755225beb_26[1] = true
			var zgensym_e0d2176755225beb_29 uint32
			zgensym_e0d2176755225beb_29, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_e0d2176755225beb_29 != cmDepth {
				err = msgp.ArrayError{Wanted: cmDepth, Got: zgensym_e0d2176755225beb_29}
				return
			}
			for zgensym_e0d2176755225beb_17 := range z.Seed {
				z.Seed[zgensym_e0d2176755225beb_17], bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
			}
		case "Mask__u64":
			found25zgensym_e0d2176755225beb_26[2] = true
			z.Mask, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_e0d2176755225beb_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of cmSketchExport
var unmarshalMsgFieldOrder25zgensym_e0d2176755225beb_26 = []string{"Rows__ary", "Seed__ary", "Mask__u64"}

var unmarshalMsgFieldSkip25zgensym_e0d2176755225beb_26 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *cmSketchExport) Msgsize() (s int) {
	s = 1 + 10 + msgp.ArrayHeaderSize
	for zgensym_e0d2176755225beb_16 := range z.Rows {
		s += msgp.BytesPrefixSize + len([]byte(z.Rows[zgensym_e0d2176755225beb_16]))
	}
	s += 10 + msgp.ArrayHeaderSize + (cmDepth * (msgp.Uint64Size)) + 10 + msgp.Uint64Size
	return
}
