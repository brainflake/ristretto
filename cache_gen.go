// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package ristretto

import (
	zExp "github.com/brainflake/ristretto/z"

	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Cache) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_25526d59711eb977_1 = 14

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_25526d59711eb977_1 uint32
	totalEncodedFields0zgensym_25526d59711eb977_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_25526d59711eb977_1 := totalEncodedFields0zgensym_25526d59711eb977_1
	missingFieldsLeft0zgensym_25526d59711eb977_1 := maxFields0zgensym_25526d59711eb977_1 - totalEncodedFields0zgensym_25526d59711eb977_1

	var nextMiss0zgensym_25526d59711eb977_1 int32 = -1
	var found0zgensym_25526d59711eb977_1 [maxFields0zgensym_25526d59711eb977_1]bool
	var curField0zgensym_25526d59711eb977_1 string

doneWithStruct0zgensym_25526d59711eb977_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_25526d59711eb977_1 > 0 || missingFieldsLeft0zgensym_25526d59711eb977_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_25526d59711eb977_1, missingFieldsLeft0zgensym_25526d59711eb977_1, msgp.ShowFound(found0zgensym_25526d59711eb977_1[:]), decodeMsgFieldOrder0zgensym_25526d59711eb977_1)
		if encodedFieldsLeft0zgensym_25526d59711eb977_1 > 0 {
			encodedFieldsLeft0zgensym_25526d59711eb977_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_25526d59711eb977_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_25526d59711eb977_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_25526d59711eb977_1 = 0
			}
			for nextMiss0zgensym_25526d59711eb977_1 < maxFields0zgensym_25526d59711eb977_1 && (found0zgensym_25526d59711eb977_1[nextMiss0zgensym_25526d59711eb977_1] || decodeMsgFieldSkip0zgensym_25526d59711eb977_1[nextMiss0zgensym_25526d59711eb977_1]) {
				nextMiss0zgensym_25526d59711eb977_1++
			}
			if nextMiss0zgensym_25526d59711eb977_1 == maxFields0zgensym_25526d59711eb977_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_25526d59711eb977_1
			}
			missingFieldsLeft0zgensym_25526d59711eb977_1--
			curField0zgensym_25526d59711eb977_1 = decodeMsgFieldOrder0zgensym_25526d59711eb977_1[nextMiss0zgensym_25526d59711eb977_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_25526d59711eb977_1)
		switch curField0zgensym_25526d59711eb977_1 {
		// -- templateDecodeMsg ends here --

		case "store_zid00_rct":
			found0zgensym_25526d59711eb977_1[0] = true
			err = z.store.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "policy_zid01_rct":
			found0zgensym_25526d59711eb977_1[1] = true
			err = z.policy.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "Metrics_zid02_ptr":
			found0zgensym_25526d59711eb977_1[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Metrics != nil {
					dc.PushAlwaysNil()
					err = z.Metrics.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Metrics == nil {
					z.Metrics = new(Metrics)
				}
				dc.DedupIndexEachPtr(z.Metrics)

				err = z.Metrics.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_25526d59711eb977_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Cache
var decodeMsgFieldOrder0zgensym_25526d59711eb977_1 = []string{"store_zid00_rct", "policy_zid01_rct", "Metrics_zid02_ptr", "", "", "", "", "", "", "", "", "", "", ""}

var decodeMsgFieldSkip0zgensym_25526d59711eb977_1 = []bool{false, false, false, true, true, true, true, true, true, true, true, true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *Cache) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = false
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Metrics == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Cache) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_25526d59711eb977_2 [14]bool
	fieldsInUse_zgensym_25526d59711eb977_3 := z.fieldsNotEmpty(empty_zgensym_25526d59711eb977_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_25526d59711eb977_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Cache'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x61, 0x63, 0x68, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_25526d59711eb977_2[0] {
		// write "store_zid00_rct"
		err = en.Append(0xaf, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.store)
		if err != nil {
			return
		}
		if !dup {
			err = z.store.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_25526d59711eb977_2[1] {
		// write "policy_zid01_rct"
		err = en.Append(0xb0, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.policy)
		if err != nil {
			return
		}
		if !dup {
			err = z.policy.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_25526d59711eb977_2[2] {
		// write "Metrics_zid02_ptr"
		err = en.Append(0xb1, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Metrics == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Metrics)
			if err != nil {
				return
			}
			if !dup {
				err = z.Metrics.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Cache) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [14]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "store_zid00_rct"
		o = append(o, 0xaf, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.store.MarshalMsg(o) // not is.iface, gen/marshal.go:243
		if err != nil {
			return
		}
	}

	if !empty[1] {
		// string "policy_zid01_rct"
		o = append(o, 0xb0, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.policy.MarshalMsg(o) // not is.iface, gen/marshal.go:243
		if err != nil {
			return
		}
	}

	if !empty[2] {
		// string "Metrics_zid02_ptr"
		o = append(o, 0xb1, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Metrics == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Metrics.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cache) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Cache) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_25526d59711eb977_5 = 14

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_25526d59711eb977_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_25526d59711eb977_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_25526d59711eb977_5 := totalEncodedFields4zgensym_25526d59711eb977_5
	missingFieldsLeft4zgensym_25526d59711eb977_5 := maxFields4zgensym_25526d59711eb977_5 - totalEncodedFields4zgensym_25526d59711eb977_5

	var nextMiss4zgensym_25526d59711eb977_5 int32 = -1
	var found4zgensym_25526d59711eb977_5 [maxFields4zgensym_25526d59711eb977_5]bool
	var curField4zgensym_25526d59711eb977_5 string

doneWithStruct4zgensym_25526d59711eb977_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_25526d59711eb977_5 > 0 || missingFieldsLeft4zgensym_25526d59711eb977_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_25526d59711eb977_5, missingFieldsLeft4zgensym_25526d59711eb977_5, msgp.ShowFound(found4zgensym_25526d59711eb977_5[:]), unmarshalMsgFieldOrder4zgensym_25526d59711eb977_5)
		if encodedFieldsLeft4zgensym_25526d59711eb977_5 > 0 {
			encodedFieldsLeft4zgensym_25526d59711eb977_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_25526d59711eb977_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_25526d59711eb977_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_25526d59711eb977_5 = 0
			}
			for nextMiss4zgensym_25526d59711eb977_5 < maxFields4zgensym_25526d59711eb977_5 && (found4zgensym_25526d59711eb977_5[nextMiss4zgensym_25526d59711eb977_5] || unmarshalMsgFieldSkip4zgensym_25526d59711eb977_5[nextMiss4zgensym_25526d59711eb977_5]) {
				nextMiss4zgensym_25526d59711eb977_5++
			}
			if nextMiss4zgensym_25526d59711eb977_5 == maxFields4zgensym_25526d59711eb977_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_25526d59711eb977_5
			}
			missingFieldsLeft4zgensym_25526d59711eb977_5--
			curField4zgensym_25526d59711eb977_5 = unmarshalMsgFieldOrder4zgensym_25526d59711eb977_5[nextMiss4zgensym_25526d59711eb977_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_25526d59711eb977_5)
		switch curField4zgensym_25526d59711eb977_5 {
		// -- templateUnmarshalMsg ends here --

		case "store_zid00_rct":
			found4zgensym_25526d59711eb977_5[0] = true
			bts, err = z.store.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "policy_zid01_rct":
			found4zgensym_25526d59711eb977_5[1] = true
			bts, err = z.policy.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "Metrics_zid02_ptr":
			found4zgensym_25526d59711eb977_5[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Metrics", alias:"Metrics", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Metrics != nil {
					z.Metrics.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Metrics {
						z.Metrics.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Metrics == nil {
						z.Metrics = new(Metrics)
					}

					bts, err = z.Metrics.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_25526d59711eb977_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Cache
var unmarshalMsgFieldOrder4zgensym_25526d59711eb977_5 = []string{"store_zid00_rct", "policy_zid01_rct", "Metrics_zid02_ptr", "", "", "", "", "", "", "", "", "", "", ""}

var unmarshalMsgFieldSkip4zgensym_25526d59711eb977_5 = []bool{false, false, false, true, true, true, true, true, true, true, true, true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Cache) Msgsize() (s int) {
	s = 1 + 16 + z.store.Msgsize() + 17 + z.policy.Msgsize() + 18
	if z.Metrics == nil {
		s += msgp.NilSize
	} else {
		s += z.Metrics.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Config) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_25526d59711eb977_7 = 10

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_25526d59711eb977_7 uint32
	totalEncodedFields6zgensym_25526d59711eb977_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_25526d59711eb977_7 := totalEncodedFields6zgensym_25526d59711eb977_7
	missingFieldsLeft6zgensym_25526d59711eb977_7 := maxFields6zgensym_25526d59711eb977_7 - totalEncodedFields6zgensym_25526d59711eb977_7

	var nextMiss6zgensym_25526d59711eb977_7 int32 = -1
	var found6zgensym_25526d59711eb977_7 [maxFields6zgensym_25526d59711eb977_7]bool
	var curField6zgensym_25526d59711eb977_7 string

doneWithStruct6zgensym_25526d59711eb977_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_25526d59711eb977_7 > 0 || missingFieldsLeft6zgensym_25526d59711eb977_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_25526d59711eb977_7, missingFieldsLeft6zgensym_25526d59711eb977_7, msgp.ShowFound(found6zgensym_25526d59711eb977_7[:]), decodeMsgFieldOrder6zgensym_25526d59711eb977_7)
		if encodedFieldsLeft6zgensym_25526d59711eb977_7 > 0 {
			encodedFieldsLeft6zgensym_25526d59711eb977_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_25526d59711eb977_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_25526d59711eb977_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_25526d59711eb977_7 = 0
			}
			for nextMiss6zgensym_25526d59711eb977_7 < maxFields6zgensym_25526d59711eb977_7 && (found6zgensym_25526d59711eb977_7[nextMiss6zgensym_25526d59711eb977_7] || decodeMsgFieldSkip6zgensym_25526d59711eb977_7[nextMiss6zgensym_25526d59711eb977_7]) {
				nextMiss6zgensym_25526d59711eb977_7++
			}
			if nextMiss6zgensym_25526d59711eb977_7 == maxFields6zgensym_25526d59711eb977_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_25526d59711eb977_7
			}
			missingFieldsLeft6zgensym_25526d59711eb977_7--
			curField6zgensym_25526d59711eb977_7 = decodeMsgFieldOrder6zgensym_25526d59711eb977_7[nextMiss6zgensym_25526d59711eb977_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_25526d59711eb977_7)
		switch curField6zgensym_25526d59711eb977_7 {
		// -- templateDecodeMsg ends here --

		case "NumCounters__i64":
			found6zgensym_25526d59711eb977_7[0] = true
			z.NumCounters, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "MaxCost__i64":
			found6zgensym_25526d59711eb977_7[1] = true
			z.MaxCost, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "BufferItems__i64":
			found6zgensym_25526d59711eb977_7[2] = true
			z.BufferItems, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Metrics__boo":
			found6zgensym_25526d59711eb977_7[3] = true
			z.Metrics, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "IgnoreInternalCost__boo":
			found6zgensym_25526d59711eb977_7[9] = true
			z.IgnoreInternalCost, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_25526d59711eb977_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Config
var decodeMsgFieldOrder6zgensym_25526d59711eb977_7 = []string{"NumCounters__i64", "MaxCost__i64", "BufferItems__i64", "Metrics__boo", "", "", "", "", "", "IgnoreInternalCost__boo"}

var decodeMsgFieldSkip6zgensym_25526d59711eb977_7 = []bool{false, false, false, false, true, true, true, true, true, false}

// fieldsNotEmpty supports omitempty tags
func (z *Config) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (z.NumCounters == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.MaxCost == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.BufferItems == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (!z.Metrics) // bool, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[9] = (!z.IgnoreInternalCost) // bool, omitempty
	if isempty[9] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Config) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_25526d59711eb977_8 [10]bool
	fieldsInUse_zgensym_25526d59711eb977_9 := z.fieldsNotEmpty(empty_zgensym_25526d59711eb977_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_25526d59711eb977_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Config'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_25526d59711eb977_8[0] {
		// write "NumCounters__i64"
		err = en.Append(0xb0, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.NumCounters)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_25526d59711eb977_8[1] {
		// write "MaxCost__i64"
		err = en.Append(0xac, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.MaxCost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_25526d59711eb977_8[2] {
		// write "BufferItems__i64"
		err = en.Append(0xb0, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.BufferItems)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_25526d59711eb977_8[3] {
		// write "Metrics__boo"
		err = en.Append(0xac, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Metrics)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_25526d59711eb977_8[9] {
		// write "IgnoreInternalCost__boo"
		err = en.Append(0xb7, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IgnoreInternalCost)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Config) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [10]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "NumCounters__i64"
		o = append(o, 0xb0, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.NumCounters)
	}

	if !empty[1] {
		// string "MaxCost__i64"
		o = append(o, 0xac, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.MaxCost)
	}

	if !empty[2] {
		// string "BufferItems__i64"
		o = append(o, 0xb0, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.BufferItems)
	}

	if !empty[3] {
		// string "Metrics__boo"
		o = append(o, 0xac, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Metrics)
	}

	if !empty[9] {
		// string "IgnoreInternalCost__boo"
		o = append(o, 0xb7, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IgnoreInternalCost)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Config) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Config) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_25526d59711eb977_11 = 10

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_25526d59711eb977_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_25526d59711eb977_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_25526d59711eb977_11 := totalEncodedFields10zgensym_25526d59711eb977_11
	missingFieldsLeft10zgensym_25526d59711eb977_11 := maxFields10zgensym_25526d59711eb977_11 - totalEncodedFields10zgensym_25526d59711eb977_11

	var nextMiss10zgensym_25526d59711eb977_11 int32 = -1
	var found10zgensym_25526d59711eb977_11 [maxFields10zgensym_25526d59711eb977_11]bool
	var curField10zgensym_25526d59711eb977_11 string

doneWithStruct10zgensym_25526d59711eb977_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_25526d59711eb977_11 > 0 || missingFieldsLeft10zgensym_25526d59711eb977_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_25526d59711eb977_11, missingFieldsLeft10zgensym_25526d59711eb977_11, msgp.ShowFound(found10zgensym_25526d59711eb977_11[:]), unmarshalMsgFieldOrder10zgensym_25526d59711eb977_11)
		if encodedFieldsLeft10zgensym_25526d59711eb977_11 > 0 {
			encodedFieldsLeft10zgensym_25526d59711eb977_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_25526d59711eb977_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_25526d59711eb977_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_25526d59711eb977_11 = 0
			}
			for nextMiss10zgensym_25526d59711eb977_11 < maxFields10zgensym_25526d59711eb977_11 && (found10zgensym_25526d59711eb977_11[nextMiss10zgensym_25526d59711eb977_11] || unmarshalMsgFieldSkip10zgensym_25526d59711eb977_11[nextMiss10zgensym_25526d59711eb977_11]) {
				nextMiss10zgensym_25526d59711eb977_11++
			}
			if nextMiss10zgensym_25526d59711eb977_11 == maxFields10zgensym_25526d59711eb977_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_25526d59711eb977_11
			}
			missingFieldsLeft10zgensym_25526d59711eb977_11--
			curField10zgensym_25526d59711eb977_11 = unmarshalMsgFieldOrder10zgensym_25526d59711eb977_11[nextMiss10zgensym_25526d59711eb977_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_25526d59711eb977_11)
		switch curField10zgensym_25526d59711eb977_11 {
		// -- templateUnmarshalMsg ends here --

		case "NumCounters__i64":
			found10zgensym_25526d59711eb977_11[0] = true
			z.NumCounters, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "MaxCost__i64":
			found10zgensym_25526d59711eb977_11[1] = true
			z.MaxCost, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "BufferItems__i64":
			found10zgensym_25526d59711eb977_11[2] = true
			z.BufferItems, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Metrics__boo":
			found10zgensym_25526d59711eb977_11[3] = true
			z.Metrics, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "IgnoreInternalCost__boo":
			found10zgensym_25526d59711eb977_11[9] = true
			z.IgnoreInternalCost, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_25526d59711eb977_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Config
var unmarshalMsgFieldOrder10zgensym_25526d59711eb977_11 = []string{"NumCounters__i64", "MaxCost__i64", "BufferItems__i64", "Metrics__boo", "", "", "", "", "", "IgnoreInternalCost__boo"}

var unmarshalMsgFieldSkip10zgensym_25526d59711eb977_11 = []bool{false, false, false, false, true, true, true, true, true, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Config) Msgsize() (s int) {
	s = 1 + 17 + msgp.Int64Size + 13 + msgp.Int64Size + 17 + msgp.Int64Size + 13 + msgp.BoolSize + 24 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Item) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_25526d59711eb977_13 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields12zgensym_25526d59711eb977_13 uint32
	totalEncodedFields12zgensym_25526d59711eb977_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_25526d59711eb977_13 := totalEncodedFields12zgensym_25526d59711eb977_13
	missingFieldsLeft12zgensym_25526d59711eb977_13 := maxFields12zgensym_25526d59711eb977_13 - totalEncodedFields12zgensym_25526d59711eb977_13

	var nextMiss12zgensym_25526d59711eb977_13 int32 = -1
	var found12zgensym_25526d59711eb977_13 [maxFields12zgensym_25526d59711eb977_13]bool
	var curField12zgensym_25526d59711eb977_13 string

doneWithStruct12zgensym_25526d59711eb977_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_25526d59711eb977_13 > 0 || missingFieldsLeft12zgensym_25526d59711eb977_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_25526d59711eb977_13, missingFieldsLeft12zgensym_25526d59711eb977_13, msgp.ShowFound(found12zgensym_25526d59711eb977_13[:]), decodeMsgFieldOrder12zgensym_25526d59711eb977_13)
		if encodedFieldsLeft12zgensym_25526d59711eb977_13 > 0 {
			encodedFieldsLeft12zgensym_25526d59711eb977_13--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField12zgensym_25526d59711eb977_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_25526d59711eb977_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_25526d59711eb977_13 = 0
			}
			for nextMiss12zgensym_25526d59711eb977_13 < maxFields12zgensym_25526d59711eb977_13 && (found12zgensym_25526d59711eb977_13[nextMiss12zgensym_25526d59711eb977_13] || decodeMsgFieldSkip12zgensym_25526d59711eb977_13[nextMiss12zgensym_25526d59711eb977_13]) {
				nextMiss12zgensym_25526d59711eb977_13++
			}
			if nextMiss12zgensym_25526d59711eb977_13 == maxFields12zgensym_25526d59711eb977_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_25526d59711eb977_13
			}
			missingFieldsLeft12zgensym_25526d59711eb977_13--
			curField12zgensym_25526d59711eb977_13 = decodeMsgFieldOrder12zgensym_25526d59711eb977_13[nextMiss12zgensym_25526d59711eb977_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_25526d59711eb977_13)
		switch curField12zgensym_25526d59711eb977_13 {
		// -- templateDecodeMsg ends here --

		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_25526d59711eb977_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Item
var decodeMsgFieldOrder12zgensym_25526d59711eb977_13 = []string{"", "", "", "", "", "", ""}

var decodeMsgFieldSkip12zgensym_25526d59711eb977_13 = []bool{true, true, true, true, true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z Item) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 0
	}
	var fieldsInUse uint32 = 0

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Item) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_25526d59711eb977_14 [7]bool
	fieldsInUse_zgensym_25526d59711eb977_15 := z.fieldsNotEmpty(empty_zgensym_25526d59711eb977_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_25526d59711eb977_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Item'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x49, 0x74, 0x65, 0x6d})
	if err != nil {
		return err
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Item) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Item) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Item) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_25526d59711eb977_17 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_25526d59711eb977_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_25526d59711eb977_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_25526d59711eb977_17 := totalEncodedFields16zgensym_25526d59711eb977_17
	missingFieldsLeft16zgensym_25526d59711eb977_17 := maxFields16zgensym_25526d59711eb977_17 - totalEncodedFields16zgensym_25526d59711eb977_17

	var nextMiss16zgensym_25526d59711eb977_17 int32 = -1
	var found16zgensym_25526d59711eb977_17 [maxFields16zgensym_25526d59711eb977_17]bool
	var curField16zgensym_25526d59711eb977_17 string

doneWithStruct16zgensym_25526d59711eb977_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_25526d59711eb977_17 > 0 || missingFieldsLeft16zgensym_25526d59711eb977_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_25526d59711eb977_17, missingFieldsLeft16zgensym_25526d59711eb977_17, msgp.ShowFound(found16zgensym_25526d59711eb977_17[:]), unmarshalMsgFieldOrder16zgensym_25526d59711eb977_17)
		if encodedFieldsLeft16zgensym_25526d59711eb977_17 > 0 {
			encodedFieldsLeft16zgensym_25526d59711eb977_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_25526d59711eb977_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_25526d59711eb977_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_25526d59711eb977_17 = 0
			}
			for nextMiss16zgensym_25526d59711eb977_17 < maxFields16zgensym_25526d59711eb977_17 && (found16zgensym_25526d59711eb977_17[nextMiss16zgensym_25526d59711eb977_17] || unmarshalMsgFieldSkip16zgensym_25526d59711eb977_17[nextMiss16zgensym_25526d59711eb977_17]) {
				nextMiss16zgensym_25526d59711eb977_17++
			}
			if nextMiss16zgensym_25526d59711eb977_17 == maxFields16zgensym_25526d59711eb977_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_25526d59711eb977_17
			}
			missingFieldsLeft16zgensym_25526d59711eb977_17--
			curField16zgensym_25526d59711eb977_17 = unmarshalMsgFieldOrder16zgensym_25526d59711eb977_17[nextMiss16zgensym_25526d59711eb977_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_25526d59711eb977_17)
		switch curField16zgensym_25526d59711eb977_17 {
		// -- templateUnmarshalMsg ends here --

		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_25526d59711eb977_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Item
var unmarshalMsgFieldOrder16zgensym_25526d59711eb977_17 = []string{"", "", "", "", "", "", ""}

var unmarshalMsgFieldSkip16zgensym_25526d59711eb977_17 = []bool{true, true, true, true, true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Item) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Metrics) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields20zgensym_25526d59711eb977_21 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields20zgensym_25526d59711eb977_21 uint32
	totalEncodedFields20zgensym_25526d59711eb977_21, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft20zgensym_25526d59711eb977_21 := totalEncodedFields20zgensym_25526d59711eb977_21
	missingFieldsLeft20zgensym_25526d59711eb977_21 := maxFields20zgensym_25526d59711eb977_21 - totalEncodedFields20zgensym_25526d59711eb977_21

	var nextMiss20zgensym_25526d59711eb977_21 int32 = -1
	var found20zgensym_25526d59711eb977_21 [maxFields20zgensym_25526d59711eb977_21]bool
	var curField20zgensym_25526d59711eb977_21 string

doneWithStruct20zgensym_25526d59711eb977_21:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft20zgensym_25526d59711eb977_21 > 0 || missingFieldsLeft20zgensym_25526d59711eb977_21 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft20zgensym_25526d59711eb977_21, missingFieldsLeft20zgensym_25526d59711eb977_21, msgp.ShowFound(found20zgensym_25526d59711eb977_21[:]), decodeMsgFieldOrder20zgensym_25526d59711eb977_21)
		if encodedFieldsLeft20zgensym_25526d59711eb977_21 > 0 {
			encodedFieldsLeft20zgensym_25526d59711eb977_21--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField20zgensym_25526d59711eb977_21 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss20zgensym_25526d59711eb977_21 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss20zgensym_25526d59711eb977_21 = 0
			}
			for nextMiss20zgensym_25526d59711eb977_21 < maxFields20zgensym_25526d59711eb977_21 && (found20zgensym_25526d59711eb977_21[nextMiss20zgensym_25526d59711eb977_21] || decodeMsgFieldSkip20zgensym_25526d59711eb977_21[nextMiss20zgensym_25526d59711eb977_21]) {
				nextMiss20zgensym_25526d59711eb977_21++
			}
			if nextMiss20zgensym_25526d59711eb977_21 == maxFields20zgensym_25526d59711eb977_21 {
				// filled all the empty fields!
				break doneWithStruct20zgensym_25526d59711eb977_21
			}
			missingFieldsLeft20zgensym_25526d59711eb977_21--
			curField20zgensym_25526d59711eb977_21 = decodeMsgFieldOrder20zgensym_25526d59711eb977_21[nextMiss20zgensym_25526d59711eb977_21]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField20zgensym_25526d59711eb977_21)
		switch curField20zgensym_25526d59711eb977_21 {
		// -- templateDecodeMsg ends here --

		case "all_zid00_ary":
			found20zgensym_25526d59711eb977_21[0] = true
			if dc.AlwaysNil {
				// nothing more here
			} else if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
			} else {

				var zgensym_25526d59711eb977_22 uint32
				zgensym_25526d59711eb977_22, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if !dc.IsNil() && zgensym_25526d59711eb977_22 != doNotUse {
					err = msgp.ArrayError{Wanted: doNotUse, Got: zgensym_25526d59711eb977_22}
					return
				}
			}
			for zgensym_25526d59711eb977_18 := range z.all {
				var zgensym_25526d59711eb977_23 uint32
				zgensym_25526d59711eb977_23, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if cap(z.all[zgensym_25526d59711eb977_18]) >= int(zgensym_25526d59711eb977_23) {
					z.all[zgensym_25526d59711eb977_18] = (z.all[zgensym_25526d59711eb977_18])[:zgensym_25526d59711eb977_23]
				} else {
					z.all[zgensym_25526d59711eb977_18] = make([]*uint64, zgensym_25526d59711eb977_23)
				}
				for zgensym_25526d59711eb977_19 := range z.all[zgensym_25526d59711eb977_18] {
					if dc.IsNil() {
						err = dc.ReadNil()
						if err != nil {
							return
						}

					} else {

						if z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] == nil {
							z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] = new(uint64)
						}
						dc.DedupIndexEachPtr(z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19])

						*z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19], err = dc.ReadUint64()
						if err != nil {
							return
						}
					}
				}
			}
		case "life_zid01_ptr":
			found20zgensym_25526d59711eb977_21[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.life != nil {
					dc.PushAlwaysNil()
					err = z.life.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.life == nil {
					z.life = new(zExp.HistogramData)
				}
				dc.DedupIndexEachPtr(z.life)

				err = z.life.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss20zgensym_25526d59711eb977_21 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Metrics
var decodeMsgFieldOrder20zgensym_25526d59711eb977_21 = []string{"all_zid00_ary", "life_zid01_ptr", ""}

var decodeMsgFieldSkip20zgensym_25526d59711eb977_21 = []bool{false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *Metrics) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.all) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.life == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Metrics) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_25526d59711eb977_24 [3]bool
	fieldsInUse_zgensym_25526d59711eb977_25 := z.fieldsNotEmpty(empty_zgensym_25526d59711eb977_24[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_25526d59711eb977_25 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Metrics'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_25526d59711eb977_24[0] {
		// write "all_zid00_ary"
		err = en.Append(0xad, 0x61, 0x6c, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x61, 0x72, 0x79)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(doNotUse)
		if err != nil {
			return
		}
		for zgensym_25526d59711eb977_18 := range z.all {
			err = en.WriteArrayHeader(uint32(len(z.all[zgensym_25526d59711eb977_18])))
			if err != nil {
				return
			}
			for zgensym_25526d59711eb977_19 := range z.all[zgensym_25526d59711eb977_18] {
				// gPtr.encodeGen():

				if z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] == nil {
					err = en.WriteNil()
					if err != nil {
						return
					}
				} else {
					err = en.WriteUint64(*z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19])
					if err != nil {
						return
					}
				}
			}
		}
	}

	if !empty_zgensym_25526d59711eb977_24[1] {
		// write "life_zid01_ptr"
		err = en.Append(0xae, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.life == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.life)
			if err != nil {
				return
			}
			if !dup {
				err = z.life.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Metrics) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "all_zid00_ary"
		o = append(o, 0xad, 0x61, 0x6c, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, doNotUse)
		for zgensym_25526d59711eb977_18 := range z.all {
			o = msgp.AppendArrayHeader(o, uint32(len(z.all[zgensym_25526d59711eb977_18])))
			for zgensym_25526d59711eb977_19 := range z.all[zgensym_25526d59711eb977_18] {
				// marshalGen.gPtr()

				if z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] == nil {
					o = msgp.AppendNil(o)
				} else {
					// hmm.. no en, no place to check en.DedupWriteIsDup(z)

					o = msgp.AppendUint64(o, *z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19])
				}
			}
		}
	}

	if !empty[1] {
		// string "life_zid01_ptr"
		o = append(o, 0xae, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.life == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.life.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Metrics) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Metrics) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields26zgensym_25526d59711eb977_27 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields26zgensym_25526d59711eb977_27 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields26zgensym_25526d59711eb977_27, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft26zgensym_25526d59711eb977_27 := totalEncodedFields26zgensym_25526d59711eb977_27
	missingFieldsLeft26zgensym_25526d59711eb977_27 := maxFields26zgensym_25526d59711eb977_27 - totalEncodedFields26zgensym_25526d59711eb977_27

	var nextMiss26zgensym_25526d59711eb977_27 int32 = -1
	var found26zgensym_25526d59711eb977_27 [maxFields26zgensym_25526d59711eb977_27]bool
	var curField26zgensym_25526d59711eb977_27 string

doneWithStruct26zgensym_25526d59711eb977_27:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft26zgensym_25526d59711eb977_27 > 0 || missingFieldsLeft26zgensym_25526d59711eb977_27 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft26zgensym_25526d59711eb977_27, missingFieldsLeft26zgensym_25526d59711eb977_27, msgp.ShowFound(found26zgensym_25526d59711eb977_27[:]), unmarshalMsgFieldOrder26zgensym_25526d59711eb977_27)
		if encodedFieldsLeft26zgensym_25526d59711eb977_27 > 0 {
			encodedFieldsLeft26zgensym_25526d59711eb977_27--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField26zgensym_25526d59711eb977_27 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss26zgensym_25526d59711eb977_27 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss26zgensym_25526d59711eb977_27 = 0
			}
			for nextMiss26zgensym_25526d59711eb977_27 < maxFields26zgensym_25526d59711eb977_27 && (found26zgensym_25526d59711eb977_27[nextMiss26zgensym_25526d59711eb977_27] || unmarshalMsgFieldSkip26zgensym_25526d59711eb977_27[nextMiss26zgensym_25526d59711eb977_27]) {
				nextMiss26zgensym_25526d59711eb977_27++
			}
			if nextMiss26zgensym_25526d59711eb977_27 == maxFields26zgensym_25526d59711eb977_27 {
				// filled all the empty fields!
				break doneWithStruct26zgensym_25526d59711eb977_27
			}
			missingFieldsLeft26zgensym_25526d59711eb977_27--
			curField26zgensym_25526d59711eb977_27 = unmarshalMsgFieldOrder26zgensym_25526d59711eb977_27[nextMiss26zgensym_25526d59711eb977_27]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField26zgensym_25526d59711eb977_27)
		switch curField26zgensym_25526d59711eb977_27 {
		// -- templateUnmarshalMsg ends here --

		case "all_zid00_ary":
			found26zgensym_25526d59711eb977_27[0] = true
			var zgensym_25526d59711eb977_28 uint32
			zgensym_25526d59711eb977_28, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_25526d59711eb977_28 != doNotUse {
				err = msgp.ArrayError{Wanted: doNotUse, Got: zgensym_25526d59711eb977_28}
				return
			}
			for zgensym_25526d59711eb977_18 := range z.all {
				if nbs.AlwaysNil {
					(z.all[zgensym_25526d59711eb977_18]) = (z.all[zgensym_25526d59711eb977_18])[:0]
				} else {

					var zgensym_25526d59711eb977_29 uint32
					zgensym_25526d59711eb977_29, bts, err = nbs.ReadArrayHeaderBytes(bts)
					if err != nil {
						return
					}
					if cap(z.all[zgensym_25526d59711eb977_18]) >= int(zgensym_25526d59711eb977_29) {
						z.all[zgensym_25526d59711eb977_18] = (z.all[zgensym_25526d59711eb977_18])[:zgensym_25526d59711eb977_29]
					} else {
						z.all[zgensym_25526d59711eb977_18] = make([]*uint64, zgensym_25526d59711eb977_29)
					}
					for zgensym_25526d59711eb977_19 := range z.all[zgensym_25526d59711eb977_18] {
						// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"*z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19]", alias:"uint64", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0xb, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

						// default gPtr logic.
						if nbs.PeekNil(bts) && z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] == nil {
							// consume the nil
							bts, err = nbs.ReadNilBytes(bts)
							if err != nil {
								return
							}
						} else {
							// read as-if the wire has bytes, letting nbs take care of nils.

							if z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] == nil {
								z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] = new(uint64)
							}

							*z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19], bts, err = nbs.ReadUint64Bytes(bts)

							if err != nil {
								return
							}
						}
					}
				}
			}
		case "life_zid01_ptr":
			found26zgensym_25526d59711eb977_27[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.life", alias:"z.HistogramData", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:true, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.life != nil {
					z.life.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.life {
						z.life.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.life == nil {
						z.life = new(zExp.HistogramData)
					}

					bts, err = z.life.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss26zgensym_25526d59711eb977_27 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Metrics
var unmarshalMsgFieldOrder26zgensym_25526d59711eb977_27 = []string{"all_zid00_ary", "life_zid01_ptr", ""}

var unmarshalMsgFieldSkip26zgensym_25526d59711eb977_27 = []bool{false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Metrics) Msgsize() (s int) {
	s = 1 + 14 + msgp.ArrayHeaderSize
	for zgensym_25526d59711eb977_18 := range z.all {
		s += msgp.ArrayHeaderSize
		for zgensym_25526d59711eb977_19 := range z.all[zgensym_25526d59711eb977_18] {
			if z.all[zgensym_25526d59711eb977_18][zgensym_25526d59711eb977_19] == nil {
				s += msgp.NilSize
			} else {
				s += msgp.Uint64Size
			}
		}
	}
	s += 15
	if z.life == nil {
		s += msgp.NilSize
	} else {
		s += z.life.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *MetricsExport) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields32zgensym_25526d59711eb977_33 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields32zgensym_25526d59711eb977_33 uint32
	totalEncodedFields32zgensym_25526d59711eb977_33, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft32zgensym_25526d59711eb977_33 := totalEncodedFields32zgensym_25526d59711eb977_33
	missingFieldsLeft32zgensym_25526d59711eb977_33 := maxFields32zgensym_25526d59711eb977_33 - totalEncodedFields32zgensym_25526d59711eb977_33

	var nextMiss32zgensym_25526d59711eb977_33 int32 = -1
	var found32zgensym_25526d59711eb977_33 [maxFields32zgensym_25526d59711eb977_33]bool
	var curField32zgensym_25526d59711eb977_33 string

doneWithStruct32zgensym_25526d59711eb977_33:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft32zgensym_25526d59711eb977_33 > 0 || missingFieldsLeft32zgensym_25526d59711eb977_33 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft32zgensym_25526d59711eb977_33, missingFieldsLeft32zgensym_25526d59711eb977_33, msgp.ShowFound(found32zgensym_25526d59711eb977_33[:]), decodeMsgFieldOrder32zgensym_25526d59711eb977_33)
		if encodedFieldsLeft32zgensym_25526d59711eb977_33 > 0 {
			encodedFieldsLeft32zgensym_25526d59711eb977_33--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField32zgensym_25526d59711eb977_33 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss32zgensym_25526d59711eb977_33 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss32zgensym_25526d59711eb977_33 = 0
			}
			for nextMiss32zgensym_25526d59711eb977_33 < maxFields32zgensym_25526d59711eb977_33 && (found32zgensym_25526d59711eb977_33[nextMiss32zgensym_25526d59711eb977_33] || decodeMsgFieldSkip32zgensym_25526d59711eb977_33[nextMiss32zgensym_25526d59711eb977_33]) {
				nextMiss32zgensym_25526d59711eb977_33++
			}
			if nextMiss32zgensym_25526d59711eb977_33 == maxFields32zgensym_25526d59711eb977_33 {
				// filled all the empty fields!
				break doneWithStruct32zgensym_25526d59711eb977_33
			}
			missingFieldsLeft32zgensym_25526d59711eb977_33--
			curField32zgensym_25526d59711eb977_33 = decodeMsgFieldOrder32zgensym_25526d59711eb977_33[nextMiss32zgensym_25526d59711eb977_33]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField32zgensym_25526d59711eb977_33)
		switch curField32zgensym_25526d59711eb977_33 {
		// -- templateDecodeMsg ends here --

		case "All__ary":
			found32zgensym_25526d59711eb977_33[0] = true
			if dc.AlwaysNil {
				// nothing more here
			} else if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
			} else {

				var zgensym_25526d59711eb977_34 uint32
				zgensym_25526d59711eb977_34, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if !dc.IsNil() && zgensym_25526d59711eb977_34 != doNotUse {
					err = msgp.ArrayError{Wanted: doNotUse, Got: zgensym_25526d59711eb977_34}
					return
				}
			}
			for zgensym_25526d59711eb977_30 := range z.All {
				var zgensym_25526d59711eb977_35 uint32
				zgensym_25526d59711eb977_35, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if cap(z.All[zgensym_25526d59711eb977_30]) >= int(zgensym_25526d59711eb977_35) {
					z.All[zgensym_25526d59711eb977_30] = (z.All[zgensym_25526d59711eb977_30])[:zgensym_25526d59711eb977_35]
				} else {
					z.All[zgensym_25526d59711eb977_30] = make([]*uint64, zgensym_25526d59711eb977_35)
				}
				for zgensym_25526d59711eb977_31 := range z.All[zgensym_25526d59711eb977_30] {
					if dc.IsNil() {
						err = dc.ReadNil()
						if err != nil {
							return
						}

					} else {

						if z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] == nil {
							z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] = new(uint64)
						}
						dc.DedupIndexEachPtr(z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31])

						*z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31], err = dc.ReadUint64()
						if err != nil {
							return
						}
					}
				}
			}
		case "Life__ptr":
			found32zgensym_25526d59711eb977_33[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Life != nil {
					dc.PushAlwaysNil()
					err = z.Life.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Life == nil {
					z.Life = new(zExp.HistogramData)
				}
				dc.DedupIndexEachPtr(z.Life)

				err = z.Life.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss32zgensym_25526d59711eb977_33 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MetricsExport
var decodeMsgFieldOrder32zgensym_25526d59711eb977_33 = []string{"All__ary", "Life__ptr"}

var decodeMsgFieldSkip32zgensym_25526d59711eb977_33 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *MetricsExport) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.All) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Life == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *MetricsExport) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_25526d59711eb977_36 [2]bool
	fieldsInUse_zgensym_25526d59711eb977_37 := z.fieldsNotEmpty(empty_zgensym_25526d59711eb977_36[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_25526d59711eb977_37 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'MetricsExport'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_25526d59711eb977_36[0] {
		// write "All__ary"
		err = en.Append(0xa8, 0x41, 0x6c, 0x6c, 0x5f, 0x5f, 0x61, 0x72, 0x79)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(doNotUse)
		if err != nil {
			return
		}
		for zgensym_25526d59711eb977_30 := range z.All {
			err = en.WriteArrayHeader(uint32(len(z.All[zgensym_25526d59711eb977_30])))
			if err != nil {
				return
			}
			for zgensym_25526d59711eb977_31 := range z.All[zgensym_25526d59711eb977_30] {
				// gPtr.encodeGen():

				if z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] == nil {
					err = en.WriteNil()
					if err != nil {
						return
					}
				} else {
					err = en.WriteUint64(*z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31])
					if err != nil {
						return
					}
				}
			}
		}
	}

	if !empty_zgensym_25526d59711eb977_36[1] {
		// write "Life__ptr"
		err = en.Append(0xa9, 0x4c, 0x69, 0x66, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Life == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Life)
			if err != nil {
				return
			}
			if !dup {
				err = z.Life.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetricsExport) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "All__ary"
		o = append(o, 0xa8, 0x41, 0x6c, 0x6c, 0x5f, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, doNotUse)
		for zgensym_25526d59711eb977_30 := range z.All {
			o = msgp.AppendArrayHeader(o, uint32(len(z.All[zgensym_25526d59711eb977_30])))
			for zgensym_25526d59711eb977_31 := range z.All[zgensym_25526d59711eb977_30] {
				// marshalGen.gPtr()

				if z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] == nil {
					o = msgp.AppendNil(o)
				} else {
					// hmm.. no en, no place to check en.DedupWriteIsDup(z)

					o = msgp.AppendUint64(o, *z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31])
				}
			}
		}
	}

	if !empty[1] {
		// string "Life__ptr"
		o = append(o, 0xa9, 0x4c, 0x69, 0x66, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Life == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Life.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetricsExport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *MetricsExport) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields38zgensym_25526d59711eb977_39 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields38zgensym_25526d59711eb977_39 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields38zgensym_25526d59711eb977_39, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft38zgensym_25526d59711eb977_39 := totalEncodedFields38zgensym_25526d59711eb977_39
	missingFieldsLeft38zgensym_25526d59711eb977_39 := maxFields38zgensym_25526d59711eb977_39 - totalEncodedFields38zgensym_25526d59711eb977_39

	var nextMiss38zgensym_25526d59711eb977_39 int32 = -1
	var found38zgensym_25526d59711eb977_39 [maxFields38zgensym_25526d59711eb977_39]bool
	var curField38zgensym_25526d59711eb977_39 string

doneWithStruct38zgensym_25526d59711eb977_39:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft38zgensym_25526d59711eb977_39 > 0 || missingFieldsLeft38zgensym_25526d59711eb977_39 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft38zgensym_25526d59711eb977_39, missingFieldsLeft38zgensym_25526d59711eb977_39, msgp.ShowFound(found38zgensym_25526d59711eb977_39[:]), unmarshalMsgFieldOrder38zgensym_25526d59711eb977_39)
		if encodedFieldsLeft38zgensym_25526d59711eb977_39 > 0 {
			encodedFieldsLeft38zgensym_25526d59711eb977_39--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField38zgensym_25526d59711eb977_39 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss38zgensym_25526d59711eb977_39 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss38zgensym_25526d59711eb977_39 = 0
			}
			for nextMiss38zgensym_25526d59711eb977_39 < maxFields38zgensym_25526d59711eb977_39 && (found38zgensym_25526d59711eb977_39[nextMiss38zgensym_25526d59711eb977_39] || unmarshalMsgFieldSkip38zgensym_25526d59711eb977_39[nextMiss38zgensym_25526d59711eb977_39]) {
				nextMiss38zgensym_25526d59711eb977_39++
			}
			if nextMiss38zgensym_25526d59711eb977_39 == maxFields38zgensym_25526d59711eb977_39 {
				// filled all the empty fields!
				break doneWithStruct38zgensym_25526d59711eb977_39
			}
			missingFieldsLeft38zgensym_25526d59711eb977_39--
			curField38zgensym_25526d59711eb977_39 = unmarshalMsgFieldOrder38zgensym_25526d59711eb977_39[nextMiss38zgensym_25526d59711eb977_39]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField38zgensym_25526d59711eb977_39)
		switch curField38zgensym_25526d59711eb977_39 {
		// -- templateUnmarshalMsg ends here --

		case "All__ary":
			found38zgensym_25526d59711eb977_39[0] = true
			var zgensym_25526d59711eb977_40 uint32
			zgensym_25526d59711eb977_40, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_25526d59711eb977_40 != doNotUse {
				err = msgp.ArrayError{Wanted: doNotUse, Got: zgensym_25526d59711eb977_40}
				return
			}
			for zgensym_25526d59711eb977_30 := range z.All {
				if nbs.AlwaysNil {
					(z.All[zgensym_25526d59711eb977_30]) = (z.All[zgensym_25526d59711eb977_30])[:0]
				} else {

					var zgensym_25526d59711eb977_41 uint32
					zgensym_25526d59711eb977_41, bts, err = nbs.ReadArrayHeaderBytes(bts)
					if err != nil {
						return
					}
					if cap(z.All[zgensym_25526d59711eb977_30]) >= int(zgensym_25526d59711eb977_41) {
						z.All[zgensym_25526d59711eb977_30] = (z.All[zgensym_25526d59711eb977_30])[:zgensym_25526d59711eb977_41]
					} else {
						z.All[zgensym_25526d59711eb977_30] = make([]*uint64, zgensym_25526d59711eb977_41)
					}
					for zgensym_25526d59711eb977_31 := range z.All[zgensym_25526d59711eb977_30] {
						// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"*z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31]", alias:"uint64", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0xb, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

						// default gPtr logic.
						if nbs.PeekNil(bts) && z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] == nil {
							// consume the nil
							bts, err = nbs.ReadNilBytes(bts)
							if err != nil {
								return
							}
						} else {
							// read as-if the wire has bytes, letting nbs take care of nils.

							if z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] == nil {
								z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] = new(uint64)
							}

							*z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31], bts, err = nbs.ReadUint64Bytes(bts)

							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Life__ptr":
			found38zgensym_25526d59711eb977_39[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Life", alias:"z.HistogramData", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:true, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Life != nil {
					z.Life.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Life {
						z.Life.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Life == nil {
						z.Life = new(zExp.HistogramData)
					}

					bts, err = z.Life.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss38zgensym_25526d59711eb977_39 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MetricsExport
var unmarshalMsgFieldOrder38zgensym_25526d59711eb977_39 = []string{"All__ary", "Life__ptr"}

var unmarshalMsgFieldSkip38zgensym_25526d59711eb977_39 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetricsExport) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for zgensym_25526d59711eb977_30 := range z.All {
		s += msgp.ArrayHeaderSize
		for zgensym_25526d59711eb977_31 := range z.All[zgensym_25526d59711eb977_30] {
			if z.All[zgensym_25526d59711eb977_30][zgensym_25526d59711eb977_31] == nil {
				s += msgp.NilSize
			} else {
				s += msgp.Uint64Size
			}
		}
	}
	s += 10
	if z.Life == nil {
		s += msgp.NilSize
	} else {
		s += z.Life.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *itemFlag) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_25526d59711eb977_42 byte
		zgensym_25526d59711eb977_42, err = dc.ReadByte()
		(*z) = itemFlag(zgensym_25526d59711eb977_42)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z itemFlag) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteByte(byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z itemFlag) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *itemFlag) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *itemFlag) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_25526d59711eb977_43 byte
		zgensym_25526d59711eb977_43, bts, err = nbs.ReadByteBytes(bts)

		if err != nil {
			return
		}
		(*z) = itemFlag(zgensym_25526d59711eb977_43)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z itemFlag) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *metricType) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_25526d59711eb977_44 int
		zgensym_25526d59711eb977_44, err = dc.ReadInt()
		(*z) = metricType(zgensym_25526d59711eb977_44)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z metricType) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z metricType) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *metricType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *metricType) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_25526d59711eb977_45 int
		zgensym_25526d59711eb977_45, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = metricType(zgensym_25526d59711eb977_45)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z metricType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
