// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package z

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Bloom) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields1zgensym_6eed748d3a1755e4_2 = 6

	// -- templateDecodeMsg starts here--
	var totalEncodedFields1zgensym_6eed748d3a1755e4_2 uint32
	totalEncodedFields1zgensym_6eed748d3a1755e4_2, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft1zgensym_6eed748d3a1755e4_2 := totalEncodedFields1zgensym_6eed748d3a1755e4_2
	missingFieldsLeft1zgensym_6eed748d3a1755e4_2 := maxFields1zgensym_6eed748d3a1755e4_2 - totalEncodedFields1zgensym_6eed748d3a1755e4_2

	var nextMiss1zgensym_6eed748d3a1755e4_2 int32 = -1
	var found1zgensym_6eed748d3a1755e4_2 [maxFields1zgensym_6eed748d3a1755e4_2]bool
	var curField1zgensym_6eed748d3a1755e4_2 string

doneWithStruct1zgensym_6eed748d3a1755e4_2:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgensym_6eed748d3a1755e4_2 > 0 || missingFieldsLeft1zgensym_6eed748d3a1755e4_2 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgensym_6eed748d3a1755e4_2, missingFieldsLeft1zgensym_6eed748d3a1755e4_2, msgp.ShowFound(found1zgensym_6eed748d3a1755e4_2[:]), decodeMsgFieldOrder1zgensym_6eed748d3a1755e4_2)
		if encodedFieldsLeft1zgensym_6eed748d3a1755e4_2 > 0 {
			encodedFieldsLeft1zgensym_6eed748d3a1755e4_2--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField1zgensym_6eed748d3a1755e4_2 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zgensym_6eed748d3a1755e4_2 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss1zgensym_6eed748d3a1755e4_2 = 0
			}
			for nextMiss1zgensym_6eed748d3a1755e4_2 < maxFields1zgensym_6eed748d3a1755e4_2 && (found1zgensym_6eed748d3a1755e4_2[nextMiss1zgensym_6eed748d3a1755e4_2] || decodeMsgFieldSkip1zgensym_6eed748d3a1755e4_2[nextMiss1zgensym_6eed748d3a1755e4_2]) {
				nextMiss1zgensym_6eed748d3a1755e4_2++
			}
			if nextMiss1zgensym_6eed748d3a1755e4_2 == maxFields1zgensym_6eed748d3a1755e4_2 {
				// filled all the empty fields!
				break doneWithStruct1zgensym_6eed748d3a1755e4_2
			}
			missingFieldsLeft1zgensym_6eed748d3a1755e4_2--
			curField1zgensym_6eed748d3a1755e4_2 = decodeMsgFieldOrder1zgensym_6eed748d3a1755e4_2[nextMiss1zgensym_6eed748d3a1755e4_2]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgensym_6eed748d3a1755e4_2)
		switch curField1zgensym_6eed748d3a1755e4_2 {
		// -- templateDecodeMsg ends here --

		case "bitset_zid00_slc":
			found1zgensym_6eed748d3a1755e4_2[0] = true
			var zgensym_6eed748d3a1755e4_3 uint32
			zgensym_6eed748d3a1755e4_3, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.bitset) >= int(zgensym_6eed748d3a1755e4_3) {
				z.bitset = (z.bitset)[:zgensym_6eed748d3a1755e4_3]
			} else {
				z.bitset = make([]uint64, zgensym_6eed748d3a1755e4_3)
			}
			for zgensym_6eed748d3a1755e4_0 := range z.bitset {
				z.bitset[zgensym_6eed748d3a1755e4_0], err = dc.ReadUint64()
				if err != nil {
					return
				}
			}
		case "ElemNum_zid01_u64":
			found1zgensym_6eed748d3a1755e4_2[1] = true
			z.ElemNum, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "sizeExp_zid02_u64":
			found1zgensym_6eed748d3a1755e4_2[2] = true
			z.sizeExp, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "size_zid03_u64":
			found1zgensym_6eed748d3a1755e4_2[3] = true
			z.size, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "setLocs_zid04_u64":
			found1zgensym_6eed748d3a1755e4_2[4] = true
			z.setLocs, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "shift_zid05_u64":
			found1zgensym_6eed748d3a1755e4_2[5] = true
			z.shift, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgensym_6eed748d3a1755e4_2 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Bloom
var decodeMsgFieldOrder1zgensym_6eed748d3a1755e4_2 = []string{"bitset_zid00_slc", "ElemNum_zid01_u64", "sizeExp_zid02_u64", "size_zid03_u64", "setLocs_zid04_u64", "shift_zid05_u64"}

var decodeMsgFieldSkip1zgensym_6eed748d3a1755e4_2 = []bool{false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Bloom) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.bitset) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.ElemNum == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.sizeExp == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.size == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.setLocs == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.shift == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Bloom) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_6eed748d3a1755e4_4 [6]bool
	fieldsInUse_zgensym_6eed748d3a1755e4_5 := z.fieldsNotEmpty(empty_zgensym_6eed748d3a1755e4_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_6eed748d3a1755e4_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Bloom'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x6c, 0x6f, 0x6f, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_6eed748d3a1755e4_4[0] {
		// write "bitset_zid00_slc"
		err = en.Append(0xb0, 0x62, 0x69, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.bitset)))
		if err != nil {
			return
		}
		for zgensym_6eed748d3a1755e4_0 := range z.bitset {
			err = en.WriteUint64(z.bitset[zgensym_6eed748d3a1755e4_0])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_4[1] {
		// write "ElemNum_zid01_u64"
		err = en.Append(0xb1, 0x45, 0x6c, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ElemNum)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_4[2] {
		// write "sizeExp_zid02_u64"
		err = en.Append(0xb1, 0x73, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.sizeExp)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_4[3] {
		// write "size_zid03_u64"
		err = en.Append(0xae, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.size)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_4[4] {
		// write "setLocs_zid04_u64"
		err = en.Append(0xb1, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.setLocs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_4[5] {
		// write "shift_zid05_u64"
		err = en.Append(0xaf, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.shift)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Bloom) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "bitset_zid00_slc"
		o = append(o, 0xb0, 0x62, 0x69, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.bitset)))
		for zgensym_6eed748d3a1755e4_0 := range z.bitset {
			o = msgp.AppendUint64(o, z.bitset[zgensym_6eed748d3a1755e4_0])
		}
	}

	if !empty[1] {
		// string "ElemNum_zid01_u64"
		o = append(o, 0xb1, 0x45, 0x6c, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.ElemNum)
	}

	if !empty[2] {
		// string "sizeExp_zid02_u64"
		o = append(o, 0xb1, 0x73, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.sizeExp)
	}

	if !empty[3] {
		// string "size_zid03_u64"
		o = append(o, 0xae, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.size)
	}

	if !empty[4] {
		// string "setLocs_zid04_u64"
		o = append(o, 0xb1, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.setLocs)
	}

	if !empty[5] {
		// string "shift_zid05_u64"
		o = append(o, 0xaf, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.shift)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Bloom) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Bloom) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_6eed748d3a1755e4_7 = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_6eed748d3a1755e4_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_6eed748d3a1755e4_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_6eed748d3a1755e4_7 := totalEncodedFields6zgensym_6eed748d3a1755e4_7
	missingFieldsLeft6zgensym_6eed748d3a1755e4_7 := maxFields6zgensym_6eed748d3a1755e4_7 - totalEncodedFields6zgensym_6eed748d3a1755e4_7

	var nextMiss6zgensym_6eed748d3a1755e4_7 int32 = -1
	var found6zgensym_6eed748d3a1755e4_7 [maxFields6zgensym_6eed748d3a1755e4_7]bool
	var curField6zgensym_6eed748d3a1755e4_7 string

doneWithStruct6zgensym_6eed748d3a1755e4_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_6eed748d3a1755e4_7 > 0 || missingFieldsLeft6zgensym_6eed748d3a1755e4_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_6eed748d3a1755e4_7, missingFieldsLeft6zgensym_6eed748d3a1755e4_7, msgp.ShowFound(found6zgensym_6eed748d3a1755e4_7[:]), unmarshalMsgFieldOrder6zgensym_6eed748d3a1755e4_7)
		if encodedFieldsLeft6zgensym_6eed748d3a1755e4_7 > 0 {
			encodedFieldsLeft6zgensym_6eed748d3a1755e4_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_6eed748d3a1755e4_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_6eed748d3a1755e4_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_6eed748d3a1755e4_7 = 0
			}
			for nextMiss6zgensym_6eed748d3a1755e4_7 < maxFields6zgensym_6eed748d3a1755e4_7 && (found6zgensym_6eed748d3a1755e4_7[nextMiss6zgensym_6eed748d3a1755e4_7] || unmarshalMsgFieldSkip6zgensym_6eed748d3a1755e4_7[nextMiss6zgensym_6eed748d3a1755e4_7]) {
				nextMiss6zgensym_6eed748d3a1755e4_7++
			}
			if nextMiss6zgensym_6eed748d3a1755e4_7 == maxFields6zgensym_6eed748d3a1755e4_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_6eed748d3a1755e4_7
			}
			missingFieldsLeft6zgensym_6eed748d3a1755e4_7--
			curField6zgensym_6eed748d3a1755e4_7 = unmarshalMsgFieldOrder6zgensym_6eed748d3a1755e4_7[nextMiss6zgensym_6eed748d3a1755e4_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_6eed748d3a1755e4_7)
		switch curField6zgensym_6eed748d3a1755e4_7 {
		// -- templateUnmarshalMsg ends here --

		case "bitset_zid00_slc":
			found6zgensym_6eed748d3a1755e4_7[0] = true
			if nbs.AlwaysNil {
				(z.bitset) = (z.bitset)[:0]
			} else {

				var zgensym_6eed748d3a1755e4_8 uint32
				zgensym_6eed748d3a1755e4_8, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.bitset) >= int(zgensym_6eed748d3a1755e4_8) {
					z.bitset = (z.bitset)[:zgensym_6eed748d3a1755e4_8]
				} else {
					z.bitset = make([]uint64, zgensym_6eed748d3a1755e4_8)
				}
				for zgensym_6eed748d3a1755e4_0 := range z.bitset {
					z.bitset[zgensym_6eed748d3a1755e4_0], bts, err = nbs.ReadUint64Bytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "ElemNum_zid01_u64":
			found6zgensym_6eed748d3a1755e4_7[1] = true
			z.ElemNum, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "sizeExp_zid02_u64":
			found6zgensym_6eed748d3a1755e4_7[2] = true
			z.sizeExp, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "size_zid03_u64":
			found6zgensym_6eed748d3a1755e4_7[3] = true
			z.size, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "setLocs_zid04_u64":
			found6zgensym_6eed748d3a1755e4_7[4] = true
			z.setLocs, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "shift_zid05_u64":
			found6zgensym_6eed748d3a1755e4_7[5] = true
			z.shift, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_6eed748d3a1755e4_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Bloom
var unmarshalMsgFieldOrder6zgensym_6eed748d3a1755e4_7 = []string{"bitset_zid00_slc", "ElemNum_zid01_u64", "sizeExp_zid02_u64", "size_zid03_u64", "setLocs_zid04_u64", "shift_zid05_u64"}

var unmarshalMsgFieldSkip6zgensym_6eed748d3a1755e4_7 = []bool{false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Bloom) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize + (len(z.bitset) * (msgp.Uint64Size)) + 18 + msgp.Uint64Size + 18 + msgp.Uint64Size + 15 + msgp.Uint64Size + 18 + msgp.Uint64Size + 16 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BloomExport) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields10zgensym_6eed748d3a1755e4_11 = 6

	// -- templateDecodeMsg starts here--
	var totalEncodedFields10zgensym_6eed748d3a1755e4_11 uint32
	totalEncodedFields10zgensym_6eed748d3a1755e4_11, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft10zgensym_6eed748d3a1755e4_11 := totalEncodedFields10zgensym_6eed748d3a1755e4_11
	missingFieldsLeft10zgensym_6eed748d3a1755e4_11 := maxFields10zgensym_6eed748d3a1755e4_11 - totalEncodedFields10zgensym_6eed748d3a1755e4_11

	var nextMiss10zgensym_6eed748d3a1755e4_11 int32 = -1
	var found10zgensym_6eed748d3a1755e4_11 [maxFields10zgensym_6eed748d3a1755e4_11]bool
	var curField10zgensym_6eed748d3a1755e4_11 string

doneWithStruct10zgensym_6eed748d3a1755e4_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_6eed748d3a1755e4_11 > 0 || missingFieldsLeft10zgensym_6eed748d3a1755e4_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_6eed748d3a1755e4_11, missingFieldsLeft10zgensym_6eed748d3a1755e4_11, msgp.ShowFound(found10zgensym_6eed748d3a1755e4_11[:]), decodeMsgFieldOrder10zgensym_6eed748d3a1755e4_11)
		if encodedFieldsLeft10zgensym_6eed748d3a1755e4_11 > 0 {
			encodedFieldsLeft10zgensym_6eed748d3a1755e4_11--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField10zgensym_6eed748d3a1755e4_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_6eed748d3a1755e4_11 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss10zgensym_6eed748d3a1755e4_11 = 0
			}
			for nextMiss10zgensym_6eed748d3a1755e4_11 < maxFields10zgensym_6eed748d3a1755e4_11 && (found10zgensym_6eed748d3a1755e4_11[nextMiss10zgensym_6eed748d3a1755e4_11] || decodeMsgFieldSkip10zgensym_6eed748d3a1755e4_11[nextMiss10zgensym_6eed748d3a1755e4_11]) {
				nextMiss10zgensym_6eed748d3a1755e4_11++
			}
			if nextMiss10zgensym_6eed748d3a1755e4_11 == maxFields10zgensym_6eed748d3a1755e4_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_6eed748d3a1755e4_11
			}
			missingFieldsLeft10zgensym_6eed748d3a1755e4_11--
			curField10zgensym_6eed748d3a1755e4_11 = decodeMsgFieldOrder10zgensym_6eed748d3a1755e4_11[nextMiss10zgensym_6eed748d3a1755e4_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_6eed748d3a1755e4_11)
		switch curField10zgensym_6eed748d3a1755e4_11 {
		// -- templateDecodeMsg ends here --

		case "Bitset__slc":
			found10zgensym_6eed748d3a1755e4_11[0] = true
			var zgensym_6eed748d3a1755e4_12 uint32
			zgensym_6eed748d3a1755e4_12, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Bitset) >= int(zgensym_6eed748d3a1755e4_12) {
				z.Bitset = (z.Bitset)[:zgensym_6eed748d3a1755e4_12]
			} else {
				z.Bitset = make([]uint64, zgensym_6eed748d3a1755e4_12)
			}
			for zgensym_6eed748d3a1755e4_9 := range z.Bitset {
				z.Bitset[zgensym_6eed748d3a1755e4_9], err = dc.ReadUint64()
				if err != nil {
					return
				}
			}
		case "ElemNum__u64":
			found10zgensym_6eed748d3a1755e4_11[1] = true
			z.ElemNum, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "SizeExp__u64":
			found10zgensym_6eed748d3a1755e4_11[2] = true
			z.SizeExp, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Size__u64":
			found10zgensym_6eed748d3a1755e4_11[3] = true
			z.Size, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "SetLocs__u64":
			found10zgensym_6eed748d3a1755e4_11[4] = true
			z.SetLocs, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Shift__u64":
			found10zgensym_6eed748d3a1755e4_11[5] = true
			z.Shift, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_6eed748d3a1755e4_11 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of BloomExport
var decodeMsgFieldOrder10zgensym_6eed748d3a1755e4_11 = []string{"Bitset__slc", "ElemNum__u64", "SizeExp__u64", "Size__u64", "SetLocs__u64", "Shift__u64"}

var decodeMsgFieldSkip10zgensym_6eed748d3a1755e4_11 = []bool{false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *BloomExport) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.Bitset) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.ElemNum == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.SizeExp == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Size == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.SetLocs == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.Shift == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *BloomExport) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_6eed748d3a1755e4_13 [6]bool
	fieldsInUse_zgensym_6eed748d3a1755e4_14 := z.fieldsNotEmpty(empty_zgensym_6eed748d3a1755e4_13[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_6eed748d3a1755e4_14 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'BloomExport'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_6eed748d3a1755e4_13[0] {
		// write "Bitset__slc"
		err = en.Append(0xab, 0x42, 0x69, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Bitset)))
		if err != nil {
			return
		}
		for zgensym_6eed748d3a1755e4_9 := range z.Bitset {
			err = en.WriteUint64(z.Bitset[zgensym_6eed748d3a1755e4_9])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_13[1] {
		// write "ElemNum__u64"
		err = en.Append(0xac, 0x45, 0x6c, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ElemNum)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_13[2] {
		// write "SizeExp__u64"
		err = en.Append(0xac, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x70, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.SizeExp)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_13[3] {
		// write "Size__u64"
		err = en.Append(0xa9, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Size)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_13[4] {
		// write "SetLocs__u64"
		err = en.Append(0xac, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x73, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.SetLocs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_13[5] {
		// write "Shift__u64"
		err = en.Append(0xaa, 0x53, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Shift)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BloomExport) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Bitset__slc"
		o = append(o, 0xab, 0x42, 0x69, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Bitset)))
		for zgensym_6eed748d3a1755e4_9 := range z.Bitset {
			o = msgp.AppendUint64(o, z.Bitset[zgensym_6eed748d3a1755e4_9])
		}
	}

	if !empty[1] {
		// string "ElemNum__u64"
		o = append(o, 0xac, 0x45, 0x6c, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.ElemNum)
	}

	if !empty[2] {
		// string "SizeExp__u64"
		o = append(o, 0xac, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x70, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.SizeExp)
	}

	if !empty[3] {
		// string "Size__u64"
		o = append(o, 0xa9, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Size)
	}

	if !empty[4] {
		// string "SetLocs__u64"
		o = append(o, 0xac, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x73, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.SetLocs)
	}

	if !empty[5] {
		// string "Shift__u64"
		o = append(o, 0xaa, 0x53, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Shift)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BloomExport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *BloomExport) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields15zgensym_6eed748d3a1755e4_16 = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields15zgensym_6eed748d3a1755e4_16 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields15zgensym_6eed748d3a1755e4_16, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft15zgensym_6eed748d3a1755e4_16 := totalEncodedFields15zgensym_6eed748d3a1755e4_16
	missingFieldsLeft15zgensym_6eed748d3a1755e4_16 := maxFields15zgensym_6eed748d3a1755e4_16 - totalEncodedFields15zgensym_6eed748d3a1755e4_16

	var nextMiss15zgensym_6eed748d3a1755e4_16 int32 = -1
	var found15zgensym_6eed748d3a1755e4_16 [maxFields15zgensym_6eed748d3a1755e4_16]bool
	var curField15zgensym_6eed748d3a1755e4_16 string

doneWithStruct15zgensym_6eed748d3a1755e4_16:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft15zgensym_6eed748d3a1755e4_16 > 0 || missingFieldsLeft15zgensym_6eed748d3a1755e4_16 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft15zgensym_6eed748d3a1755e4_16, missingFieldsLeft15zgensym_6eed748d3a1755e4_16, msgp.ShowFound(found15zgensym_6eed748d3a1755e4_16[:]), unmarshalMsgFieldOrder15zgensym_6eed748d3a1755e4_16)
		if encodedFieldsLeft15zgensym_6eed748d3a1755e4_16 > 0 {
			encodedFieldsLeft15zgensym_6eed748d3a1755e4_16--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField15zgensym_6eed748d3a1755e4_16 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss15zgensym_6eed748d3a1755e4_16 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss15zgensym_6eed748d3a1755e4_16 = 0
			}
			for nextMiss15zgensym_6eed748d3a1755e4_16 < maxFields15zgensym_6eed748d3a1755e4_16 && (found15zgensym_6eed748d3a1755e4_16[nextMiss15zgensym_6eed748d3a1755e4_16] || unmarshalMsgFieldSkip15zgensym_6eed748d3a1755e4_16[nextMiss15zgensym_6eed748d3a1755e4_16]) {
				nextMiss15zgensym_6eed748d3a1755e4_16++
			}
			if nextMiss15zgensym_6eed748d3a1755e4_16 == maxFields15zgensym_6eed748d3a1755e4_16 {
				// filled all the empty fields!
				break doneWithStruct15zgensym_6eed748d3a1755e4_16
			}
			missingFieldsLeft15zgensym_6eed748d3a1755e4_16--
			curField15zgensym_6eed748d3a1755e4_16 = unmarshalMsgFieldOrder15zgensym_6eed748d3a1755e4_16[nextMiss15zgensym_6eed748d3a1755e4_16]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField15zgensym_6eed748d3a1755e4_16)
		switch curField15zgensym_6eed748d3a1755e4_16 {
		// -- templateUnmarshalMsg ends here --

		case "Bitset__slc":
			found15zgensym_6eed748d3a1755e4_16[0] = true
			if nbs.AlwaysNil {
				(z.Bitset) = (z.Bitset)[:0]
			} else {

				var zgensym_6eed748d3a1755e4_17 uint32
				zgensym_6eed748d3a1755e4_17, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Bitset) >= int(zgensym_6eed748d3a1755e4_17) {
					z.Bitset = (z.Bitset)[:zgensym_6eed748d3a1755e4_17]
				} else {
					z.Bitset = make([]uint64, zgensym_6eed748d3a1755e4_17)
				}
				for zgensym_6eed748d3a1755e4_9 := range z.Bitset {
					z.Bitset[zgensym_6eed748d3a1755e4_9], bts, err = nbs.ReadUint64Bytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "ElemNum__u64":
			found15zgensym_6eed748d3a1755e4_16[1] = true
			z.ElemNum, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "SizeExp__u64":
			found15zgensym_6eed748d3a1755e4_16[2] = true
			z.SizeExp, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "Size__u64":
			found15zgensym_6eed748d3a1755e4_16[3] = true
			z.Size, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "SetLocs__u64":
			found15zgensym_6eed748d3a1755e4_16[4] = true
			z.SetLocs, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "Shift__u64":
			found15zgensym_6eed748d3a1755e4_16[5] = true
			z.Shift, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss15zgensym_6eed748d3a1755e4_16 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of BloomExport
var unmarshalMsgFieldOrder15zgensym_6eed748d3a1755e4_16 = []string{"Bitset__slc", "ElemNum__u64", "SizeExp__u64", "Size__u64", "SetLocs__u64", "Shift__u64"}

var unmarshalMsgFieldSkip15zgensym_6eed748d3a1755e4_16 = []bool{false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BloomExport) Msgsize() (s int) {
	s = 1 + 12 + msgp.ArrayHeaderSize + (len(z.Bitset) * (msgp.Uint64Size)) + 13 + msgp.Uint64Size + 13 + msgp.Uint64Size + 10 + msgp.Uint64Size + 13 + msgp.Uint64Size + 11 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *bloomJSONImExport) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields18zgensym_6eed748d3a1755e4_19 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields18zgensym_6eed748d3a1755e4_19 uint32
	totalEncodedFields18zgensym_6eed748d3a1755e4_19, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft18zgensym_6eed748d3a1755e4_19 := totalEncodedFields18zgensym_6eed748d3a1755e4_19
	missingFieldsLeft18zgensym_6eed748d3a1755e4_19 := maxFields18zgensym_6eed748d3a1755e4_19 - totalEncodedFields18zgensym_6eed748d3a1755e4_19

	var nextMiss18zgensym_6eed748d3a1755e4_19 int32 = -1
	var found18zgensym_6eed748d3a1755e4_19 [maxFields18zgensym_6eed748d3a1755e4_19]bool
	var curField18zgensym_6eed748d3a1755e4_19 string

doneWithStruct18zgensym_6eed748d3a1755e4_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_6eed748d3a1755e4_19 > 0 || missingFieldsLeft18zgensym_6eed748d3a1755e4_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_6eed748d3a1755e4_19, missingFieldsLeft18zgensym_6eed748d3a1755e4_19, msgp.ShowFound(found18zgensym_6eed748d3a1755e4_19[:]), decodeMsgFieldOrder18zgensym_6eed748d3a1755e4_19)
		if encodedFieldsLeft18zgensym_6eed748d3a1755e4_19 > 0 {
			encodedFieldsLeft18zgensym_6eed748d3a1755e4_19--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField18zgensym_6eed748d3a1755e4_19 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss18zgensym_6eed748d3a1755e4_19 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss18zgensym_6eed748d3a1755e4_19 = 0
			}
			for nextMiss18zgensym_6eed748d3a1755e4_19 < maxFields18zgensym_6eed748d3a1755e4_19 && (found18zgensym_6eed748d3a1755e4_19[nextMiss18zgensym_6eed748d3a1755e4_19] || decodeMsgFieldSkip18zgensym_6eed748d3a1755e4_19[nextMiss18zgensym_6eed748d3a1755e4_19]) {
				nextMiss18zgensym_6eed748d3a1755e4_19++
			}
			if nextMiss18zgensym_6eed748d3a1755e4_19 == maxFields18zgensym_6eed748d3a1755e4_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_6eed748d3a1755e4_19
			}
			missingFieldsLeft18zgensym_6eed748d3a1755e4_19--
			curField18zgensym_6eed748d3a1755e4_19 = decodeMsgFieldOrder18zgensym_6eed748d3a1755e4_19[nextMiss18zgensym_6eed748d3a1755e4_19]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_6eed748d3a1755e4_19)
		switch curField18zgensym_6eed748d3a1755e4_19 {
		// -- templateDecodeMsg ends here --

		case "FilterSet__bin":
			found18zgensym_6eed748d3a1755e4_19[0] = true
			z.FilterSet, err = dc.ReadBytes(z.FilterSet)
			if err != nil {
				return
			}
		case "SetLocs__u64":
			found18zgensym_6eed748d3a1755e4_19[1] = true
			z.SetLocs, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "ElemNum__u64":
			found18zgensym_6eed748d3a1755e4_19[2] = true
			z.ElemNum, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_6eed748d3a1755e4_19 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of bloomJSONImExport
var decodeMsgFieldOrder18zgensym_6eed748d3a1755e4_19 = []string{"FilterSet__bin", "SetLocs__u64", "ElemNum__u64"}

var decodeMsgFieldSkip18zgensym_6eed748d3a1755e4_19 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *bloomJSONImExport) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.FilterSet) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.SetLocs == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ElemNum == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *bloomJSONImExport) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_6eed748d3a1755e4_20 [3]bool
	fieldsInUse_zgensym_6eed748d3a1755e4_21 := z.fieldsNotEmpty(empty_zgensym_6eed748d3a1755e4_20[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_6eed748d3a1755e4_21 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'bloomJSONImExport'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x49, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_6eed748d3a1755e4_20[0] {
		// write "FilterSet__bin"
		err = en.Append(0xae, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x5f, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.FilterSet)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_20[1] {
		// write "SetLocs__u64"
		err = en.Append(0xac, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x73, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.SetLocs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_6eed748d3a1755e4_20[2] {
		// write "ElemNum__u64"
		err = en.Append(0xac, 0x45, 0x6c, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ElemNum)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *bloomJSONImExport) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "FilterSet__bin"
		o = append(o, 0xae, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x5f, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.FilterSet)
	}

	if !empty[1] {
		// string "SetLocs__u64"
		o = append(o, 0xac, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x73, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.SetLocs)
	}

	if !empty[2] {
		// string "ElemNum__u64"
		o = append(o, 0xac, 0x45, 0x6c, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x5f, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.ElemNum)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *bloomJSONImExport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *bloomJSONImExport) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields22zgensym_6eed748d3a1755e4_23 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields22zgensym_6eed748d3a1755e4_23 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields22zgensym_6eed748d3a1755e4_23, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft22zgensym_6eed748d3a1755e4_23 := totalEncodedFields22zgensym_6eed748d3a1755e4_23
	missingFieldsLeft22zgensym_6eed748d3a1755e4_23 := maxFields22zgensym_6eed748d3a1755e4_23 - totalEncodedFields22zgensym_6eed748d3a1755e4_23

	var nextMiss22zgensym_6eed748d3a1755e4_23 int32 = -1
	var found22zgensym_6eed748d3a1755e4_23 [maxFields22zgensym_6eed748d3a1755e4_23]bool
	var curField22zgensym_6eed748d3a1755e4_23 string

doneWithStruct22zgensym_6eed748d3a1755e4_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_6eed748d3a1755e4_23 > 0 || missingFieldsLeft22zgensym_6eed748d3a1755e4_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft22zgensym_6eed748d3a1755e4_23, missingFieldsLeft22zgensym_6eed748d3a1755e4_23, msgp.ShowFound(found22zgensym_6eed748d3a1755e4_23[:]), unmarshalMsgFieldOrder22zgensym_6eed748d3a1755e4_23)
		if encodedFieldsLeft22zgensym_6eed748d3a1755e4_23 > 0 {
			encodedFieldsLeft22zgensym_6eed748d3a1755e4_23--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField22zgensym_6eed748d3a1755e4_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_6eed748d3a1755e4_23 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss22zgensym_6eed748d3a1755e4_23 = 0
			}
			for nextMiss22zgensym_6eed748d3a1755e4_23 < maxFields22zgensym_6eed748d3a1755e4_23 && (found22zgensym_6eed748d3a1755e4_23[nextMiss22zgensym_6eed748d3a1755e4_23] || unmarshalMsgFieldSkip22zgensym_6eed748d3a1755e4_23[nextMiss22zgensym_6eed748d3a1755e4_23]) {
				nextMiss22zgensym_6eed748d3a1755e4_23++
			}
			if nextMiss22zgensym_6eed748d3a1755e4_23 == maxFields22zgensym_6eed748d3a1755e4_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_6eed748d3a1755e4_23
			}
			missingFieldsLeft22zgensym_6eed748d3a1755e4_23--
			curField22zgensym_6eed748d3a1755e4_23 = unmarshalMsgFieldOrder22zgensym_6eed748d3a1755e4_23[nextMiss22zgensym_6eed748d3a1755e4_23]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField22zgensym_6eed748d3a1755e4_23)
		switch curField22zgensym_6eed748d3a1755e4_23 {
		// -- templateUnmarshalMsg ends here --

		case "FilterSet__bin":
			found22zgensym_6eed748d3a1755e4_23[0] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.FilterSet = z.FilterSet[:0]
			} else {
				z.FilterSet, bts, err = nbs.ReadBytesBytes(bts, z.FilterSet)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "SetLocs__u64":
			found22zgensym_6eed748d3a1755e4_23[1] = true
			z.SetLocs, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "ElemNum__u64":
			found22zgensym_6eed748d3a1755e4_23[2] = true
			z.ElemNum, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_6eed748d3a1755e4_23 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of bloomJSONImExport
var unmarshalMsgFieldOrder22zgensym_6eed748d3a1755e4_23 = []string{"FilterSet__bin", "SetLocs__u64", "ElemNum__u64"}

var unmarshalMsgFieldSkip22zgensym_6eed748d3a1755e4_23 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *bloomJSONImExport) Msgsize() (s int) {
	s = 1 + 15 + msgp.BytesPrefixSize + len(z.FilterSet) + 13 + msgp.Uint64Size + 13 + msgp.Uint64Size
	return
}
