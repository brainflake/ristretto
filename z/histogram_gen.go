// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package z

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HistogramData) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_405489a3af563ad3_3 = 6

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_405489a3af563ad3_3 uint32
	totalEncodedFields2zgensym_405489a3af563ad3_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_405489a3af563ad3_3 := totalEncodedFields2zgensym_405489a3af563ad3_3
	missingFieldsLeft2zgensym_405489a3af563ad3_3 := maxFields2zgensym_405489a3af563ad3_3 - totalEncodedFields2zgensym_405489a3af563ad3_3

	var nextMiss2zgensym_405489a3af563ad3_3 int32 = -1
	var found2zgensym_405489a3af563ad3_3 [maxFields2zgensym_405489a3af563ad3_3]bool
	var curField2zgensym_405489a3af563ad3_3 string

doneWithStruct2zgensym_405489a3af563ad3_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_405489a3af563ad3_3 > 0 || missingFieldsLeft2zgensym_405489a3af563ad3_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_405489a3af563ad3_3, missingFieldsLeft2zgensym_405489a3af563ad3_3, msgp.ShowFound(found2zgensym_405489a3af563ad3_3[:]), decodeMsgFieldOrder2zgensym_405489a3af563ad3_3)
		if encodedFieldsLeft2zgensym_405489a3af563ad3_3 > 0 {
			encodedFieldsLeft2zgensym_405489a3af563ad3_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_405489a3af563ad3_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_405489a3af563ad3_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_405489a3af563ad3_3 = 0
			}
			for nextMiss2zgensym_405489a3af563ad3_3 < maxFields2zgensym_405489a3af563ad3_3 && (found2zgensym_405489a3af563ad3_3[nextMiss2zgensym_405489a3af563ad3_3] || decodeMsgFieldSkip2zgensym_405489a3af563ad3_3[nextMiss2zgensym_405489a3af563ad3_3]) {
				nextMiss2zgensym_405489a3af563ad3_3++
			}
			if nextMiss2zgensym_405489a3af563ad3_3 == maxFields2zgensym_405489a3af563ad3_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_405489a3af563ad3_3
			}
			missingFieldsLeft2zgensym_405489a3af563ad3_3--
			curField2zgensym_405489a3af563ad3_3 = decodeMsgFieldOrder2zgensym_405489a3af563ad3_3[nextMiss2zgensym_405489a3af563ad3_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_405489a3af563ad3_3)
		switch curField2zgensym_405489a3af563ad3_3 {
		// -- templateDecodeMsg ends here --

		case "Bounds_zid00_slc":
			found2zgensym_405489a3af563ad3_3[0] = true
			var zgensym_405489a3af563ad3_4 uint32
			zgensym_405489a3af563ad3_4, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Bounds) >= int(zgensym_405489a3af563ad3_4) {
				z.Bounds = (z.Bounds)[:zgensym_405489a3af563ad3_4]
			} else {
				z.Bounds = make([]float64, zgensym_405489a3af563ad3_4)
			}
			for zgensym_405489a3af563ad3_0 := range z.Bounds {
				z.Bounds[zgensym_405489a3af563ad3_0], err = dc.ReadFloat64()
				if err != nil {
					return
				}
			}
		case "Count_zid01_i64":
			found2zgensym_405489a3af563ad3_3[1] = true
			z.Count, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CountPerBucket_zid02_slc":
			found2zgensym_405489a3af563ad3_3[2] = true
			var zgensym_405489a3af563ad3_5 uint32
			zgensym_405489a3af563ad3_5, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.CountPerBucket) >= int(zgensym_405489a3af563ad3_5) {
				z.CountPerBucket = (z.CountPerBucket)[:zgensym_405489a3af563ad3_5]
			} else {
				z.CountPerBucket = make([]int64, zgensym_405489a3af563ad3_5)
			}
			for zgensym_405489a3af563ad3_1 := range z.CountPerBucket {
				z.CountPerBucket[zgensym_405489a3af563ad3_1], err = dc.ReadInt64()
				if err != nil {
					return
				}
			}
		case "Min_zid03_i64":
			found2zgensym_405489a3af563ad3_3[3] = true
			z.Min, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Max_zid04_i64":
			found2zgensym_405489a3af563ad3_3[4] = true
			z.Max, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Sum_zid05_i64":
			found2zgensym_405489a3af563ad3_3[5] = true
			z.Sum, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_405489a3af563ad3_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HistogramData
var decodeMsgFieldOrder2zgensym_405489a3af563ad3_3 = []string{"Bounds_zid00_slc", "Count_zid01_i64", "CountPerBucket_zid02_slc", "Min_zid03_i64", "Max_zid04_i64", "Sum_zid05_i64"}

var decodeMsgFieldSkip2zgensym_405489a3af563ad3_3 = []bool{false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HistogramData) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.Bounds) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Count == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.CountPerBucket) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Min == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Max == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.Sum == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HistogramData) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_405489a3af563ad3_6 [6]bool
	fieldsInUse_zgensym_405489a3af563ad3_7 := z.fieldsNotEmpty(empty_zgensym_405489a3af563ad3_6[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_405489a3af563ad3_7 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HistogramData'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61})
	if err != nil {
		return err
	}

	if !empty_zgensym_405489a3af563ad3_6[0] {
		// write "Bounds_zid00_slc"
		err = en.Append(0xb0, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Bounds)))
		if err != nil {
			return
		}
		for zgensym_405489a3af563ad3_0 := range z.Bounds {
			err = en.WriteFloat64(z.Bounds[zgensym_405489a3af563ad3_0])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_405489a3af563ad3_6[1] {
		// write "Count_zid01_i64"
		err = en.Append(0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Count)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_405489a3af563ad3_6[2] {
		// write "CountPerBucket_zid02_slc"
		err = en.Append(0xb8, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.CountPerBucket)))
		if err != nil {
			return
		}
		for zgensym_405489a3af563ad3_1 := range z.CountPerBucket {
			err = en.WriteInt64(z.CountPerBucket[zgensym_405489a3af563ad3_1])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_405489a3af563ad3_6[3] {
		// write "Min_zid03_i64"
		err = en.Append(0xad, 0x4d, 0x69, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Min)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_405489a3af563ad3_6[4] {
		// write "Max_zid04_i64"
		err = en.Append(0xad, 0x4d, 0x61, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Max)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_405489a3af563ad3_6[5] {
		// write "Sum_zid05_i64"
		err = en.Append(0xad, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Sum)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HistogramData) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Bounds_zid00_slc"
		o = append(o, 0xb0, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Bounds)))
		for zgensym_405489a3af563ad3_0 := range z.Bounds {
			o = msgp.AppendFloat64(o, z.Bounds[zgensym_405489a3af563ad3_0])
		}
	}

	if !empty[1] {
		// string "Count_zid01_i64"
		o = append(o, 0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Count)
	}

	if !empty[2] {
		// string "CountPerBucket_zid02_slc"
		o = append(o, 0xb8, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.CountPerBucket)))
		for zgensym_405489a3af563ad3_1 := range z.CountPerBucket {
			o = msgp.AppendInt64(o, z.CountPerBucket[zgensym_405489a3af563ad3_1])
		}
	}

	if !empty[3] {
		// string "Min_zid03_i64"
		o = append(o, 0xad, 0x4d, 0x69, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Min)
	}

	if !empty[4] {
		// string "Max_zid04_i64"
		o = append(o, 0xad, 0x4d, 0x61, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Max)
	}

	if !empty[5] {
		// string "Sum_zid05_i64"
		o = append(o, 0xad, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Sum)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HistogramData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HistogramData) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields8zgensym_405489a3af563ad3_9 = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields8zgensym_405489a3af563ad3_9 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields8zgensym_405489a3af563ad3_9, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft8zgensym_405489a3af563ad3_9 := totalEncodedFields8zgensym_405489a3af563ad3_9
	missingFieldsLeft8zgensym_405489a3af563ad3_9 := maxFields8zgensym_405489a3af563ad3_9 - totalEncodedFields8zgensym_405489a3af563ad3_9

	var nextMiss8zgensym_405489a3af563ad3_9 int32 = -1
	var found8zgensym_405489a3af563ad3_9 [maxFields8zgensym_405489a3af563ad3_9]bool
	var curField8zgensym_405489a3af563ad3_9 string

doneWithStruct8zgensym_405489a3af563ad3_9:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft8zgensym_405489a3af563ad3_9 > 0 || missingFieldsLeft8zgensym_405489a3af563ad3_9 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_405489a3af563ad3_9, missingFieldsLeft8zgensym_405489a3af563ad3_9, msgp.ShowFound(found8zgensym_405489a3af563ad3_9[:]), unmarshalMsgFieldOrder8zgensym_405489a3af563ad3_9)
		if encodedFieldsLeft8zgensym_405489a3af563ad3_9 > 0 {
			encodedFieldsLeft8zgensym_405489a3af563ad3_9--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField8zgensym_405489a3af563ad3_9 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss8zgensym_405489a3af563ad3_9 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss8zgensym_405489a3af563ad3_9 = 0
			}
			for nextMiss8zgensym_405489a3af563ad3_9 < maxFields8zgensym_405489a3af563ad3_9 && (found8zgensym_405489a3af563ad3_9[nextMiss8zgensym_405489a3af563ad3_9] || unmarshalMsgFieldSkip8zgensym_405489a3af563ad3_9[nextMiss8zgensym_405489a3af563ad3_9]) {
				nextMiss8zgensym_405489a3af563ad3_9++
			}
			if nextMiss8zgensym_405489a3af563ad3_9 == maxFields8zgensym_405489a3af563ad3_9 {
				// filled all the empty fields!
				break doneWithStruct8zgensym_405489a3af563ad3_9
			}
			missingFieldsLeft8zgensym_405489a3af563ad3_9--
			curField8zgensym_405489a3af563ad3_9 = unmarshalMsgFieldOrder8zgensym_405489a3af563ad3_9[nextMiss8zgensym_405489a3af563ad3_9]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_405489a3af563ad3_9)
		switch curField8zgensym_405489a3af563ad3_9 {
		// -- templateUnmarshalMsg ends here --

		case "Bounds_zid00_slc":
			found8zgensym_405489a3af563ad3_9[0] = true
			if nbs.AlwaysNil {
				(z.Bounds) = (z.Bounds)[:0]
			} else {

				var zgensym_405489a3af563ad3_10 uint32
				zgensym_405489a3af563ad3_10, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Bounds) >= int(zgensym_405489a3af563ad3_10) {
					z.Bounds = (z.Bounds)[:zgensym_405489a3af563ad3_10]
				} else {
					z.Bounds = make([]float64, zgensym_405489a3af563ad3_10)
				}
				for zgensym_405489a3af563ad3_0 := range z.Bounds {
					z.Bounds[zgensym_405489a3af563ad3_0], bts, err = nbs.ReadFloat64Bytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Count_zid01_i64":
			found8zgensym_405489a3af563ad3_9[1] = true
			z.Count, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CountPerBucket_zid02_slc":
			found8zgensym_405489a3af563ad3_9[2] = true
			if nbs.AlwaysNil {
				(z.CountPerBucket) = (z.CountPerBucket)[:0]
			} else {

				var zgensym_405489a3af563ad3_11 uint32
				zgensym_405489a3af563ad3_11, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.CountPerBucket) >= int(zgensym_405489a3af563ad3_11) {
					z.CountPerBucket = (z.CountPerBucket)[:zgensym_405489a3af563ad3_11]
				} else {
					z.CountPerBucket = make([]int64, zgensym_405489a3af563ad3_11)
				}
				for zgensym_405489a3af563ad3_1 := range z.CountPerBucket {
					z.CountPerBucket[zgensym_405489a3af563ad3_1], bts, err = nbs.ReadInt64Bytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Min_zid03_i64":
			found8zgensym_405489a3af563ad3_9[3] = true
			z.Min, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Max_zid04_i64":
			found8zgensym_405489a3af563ad3_9[4] = true
			z.Max, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Sum_zid05_i64":
			found8zgensym_405489a3af563ad3_9[5] = true
			z.Sum, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss8zgensym_405489a3af563ad3_9 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HistogramData
var unmarshalMsgFieldOrder8zgensym_405489a3af563ad3_9 = []string{"Bounds_zid00_slc", "Count_zid01_i64", "CountPerBucket_zid02_slc", "Min_zid03_i64", "Max_zid04_i64", "Sum_zid05_i64"}

var unmarshalMsgFieldSkip8zgensym_405489a3af563ad3_9 = []bool{false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HistogramData) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize + (len(z.Bounds) * (msgp.Float64Size)) + 16 + msgp.Int64Size + 25 + msgp.ArrayHeaderSize + (len(z.CountPerBucket) * (msgp.Int64Size)) + 14 + msgp.Int64Size + 14 + msgp.Int64Size + 14 + msgp.Int64Size
	return
}
