// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package ristretto

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *lockedMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_ba2497133e91d5fe_1 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_ba2497133e91d5fe_1 uint32
	totalEncodedFields0zgensym_ba2497133e91d5fe_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_ba2497133e91d5fe_1 := totalEncodedFields0zgensym_ba2497133e91d5fe_1
	missingFieldsLeft0zgensym_ba2497133e91d5fe_1 := maxFields0zgensym_ba2497133e91d5fe_1 - totalEncodedFields0zgensym_ba2497133e91d5fe_1

	var nextMiss0zgensym_ba2497133e91d5fe_1 int32 = -1
	var found0zgensym_ba2497133e91d5fe_1 [maxFields0zgensym_ba2497133e91d5fe_1]bool
	var curField0zgensym_ba2497133e91d5fe_1 string

doneWithStruct0zgensym_ba2497133e91d5fe_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_ba2497133e91d5fe_1 > 0 || missingFieldsLeft0zgensym_ba2497133e91d5fe_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_ba2497133e91d5fe_1, missingFieldsLeft0zgensym_ba2497133e91d5fe_1, msgp.ShowFound(found0zgensym_ba2497133e91d5fe_1[:]), decodeMsgFieldOrder0zgensym_ba2497133e91d5fe_1)
		if encodedFieldsLeft0zgensym_ba2497133e91d5fe_1 > 0 {
			encodedFieldsLeft0zgensym_ba2497133e91d5fe_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_ba2497133e91d5fe_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_ba2497133e91d5fe_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_ba2497133e91d5fe_1 = 0
			}
			for nextMiss0zgensym_ba2497133e91d5fe_1 < maxFields0zgensym_ba2497133e91d5fe_1 && (found0zgensym_ba2497133e91d5fe_1[nextMiss0zgensym_ba2497133e91d5fe_1] || decodeMsgFieldSkip0zgensym_ba2497133e91d5fe_1[nextMiss0zgensym_ba2497133e91d5fe_1]) {
				nextMiss0zgensym_ba2497133e91d5fe_1++
			}
			if nextMiss0zgensym_ba2497133e91d5fe_1 == maxFields0zgensym_ba2497133e91d5fe_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_ba2497133e91d5fe_1
			}
			missingFieldsLeft0zgensym_ba2497133e91d5fe_1--
			curField0zgensym_ba2497133e91d5fe_1 = decodeMsgFieldOrder0zgensym_ba2497133e91d5fe_1[nextMiss0zgensym_ba2497133e91d5fe_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_ba2497133e91d5fe_1)
		switch curField0zgensym_ba2497133e91d5fe_1 {
		// -- templateDecodeMsg ends here --

		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_ba2497133e91d5fe_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of lockedMap
var decodeMsgFieldOrder0zgensym_ba2497133e91d5fe_1 = []string{"", "", ""}

var decodeMsgFieldSkip0zgensym_ba2497133e91d5fe_1 = []bool{true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z lockedMap) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 0
	}
	var fieldsInUse uint32 = 0

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z lockedMap) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_ba2497133e91d5fe_2 [3]bool
	fieldsInUse_zgensym_ba2497133e91d5fe_3 := z.fieldsNotEmpty(empty_zgensym_ba2497133e91d5fe_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_ba2497133e91d5fe_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'lockedMap'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x70})
	if err != nil {
		return err
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z lockedMap) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *lockedMap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *lockedMap) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_ba2497133e91d5fe_5 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_ba2497133e91d5fe_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_ba2497133e91d5fe_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_ba2497133e91d5fe_5 := totalEncodedFields4zgensym_ba2497133e91d5fe_5
	missingFieldsLeft4zgensym_ba2497133e91d5fe_5 := maxFields4zgensym_ba2497133e91d5fe_5 - totalEncodedFields4zgensym_ba2497133e91d5fe_5

	var nextMiss4zgensym_ba2497133e91d5fe_5 int32 = -1
	var found4zgensym_ba2497133e91d5fe_5 [maxFields4zgensym_ba2497133e91d5fe_5]bool
	var curField4zgensym_ba2497133e91d5fe_5 string

doneWithStruct4zgensym_ba2497133e91d5fe_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_ba2497133e91d5fe_5 > 0 || missingFieldsLeft4zgensym_ba2497133e91d5fe_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_ba2497133e91d5fe_5, missingFieldsLeft4zgensym_ba2497133e91d5fe_5, msgp.ShowFound(found4zgensym_ba2497133e91d5fe_5[:]), unmarshalMsgFieldOrder4zgensym_ba2497133e91d5fe_5)
		if encodedFieldsLeft4zgensym_ba2497133e91d5fe_5 > 0 {
			encodedFieldsLeft4zgensym_ba2497133e91d5fe_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_ba2497133e91d5fe_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_ba2497133e91d5fe_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_ba2497133e91d5fe_5 = 0
			}
			for nextMiss4zgensym_ba2497133e91d5fe_5 < maxFields4zgensym_ba2497133e91d5fe_5 && (found4zgensym_ba2497133e91d5fe_5[nextMiss4zgensym_ba2497133e91d5fe_5] || unmarshalMsgFieldSkip4zgensym_ba2497133e91d5fe_5[nextMiss4zgensym_ba2497133e91d5fe_5]) {
				nextMiss4zgensym_ba2497133e91d5fe_5++
			}
			if nextMiss4zgensym_ba2497133e91d5fe_5 == maxFields4zgensym_ba2497133e91d5fe_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_ba2497133e91d5fe_5
			}
			missingFieldsLeft4zgensym_ba2497133e91d5fe_5--
			curField4zgensym_ba2497133e91d5fe_5 = unmarshalMsgFieldOrder4zgensym_ba2497133e91d5fe_5[nextMiss4zgensym_ba2497133e91d5fe_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_ba2497133e91d5fe_5)
		switch curField4zgensym_ba2497133e91d5fe_5 {
		// -- templateUnmarshalMsg ends here --

		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_ba2497133e91d5fe_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of lockedMap
var unmarshalMsgFieldOrder4zgensym_ba2497133e91d5fe_5 = []string{"", "", ""}

var unmarshalMsgFieldSkip4zgensym_ba2497133e91d5fe_5 = []bool{true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z lockedMap) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *shardedMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields7zgensym_ba2497133e91d5fe_8 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields7zgensym_ba2497133e91d5fe_8 uint32
	totalEncodedFields7zgensym_ba2497133e91d5fe_8, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft7zgensym_ba2497133e91d5fe_8 := totalEncodedFields7zgensym_ba2497133e91d5fe_8
	missingFieldsLeft7zgensym_ba2497133e91d5fe_8 := maxFields7zgensym_ba2497133e91d5fe_8 - totalEncodedFields7zgensym_ba2497133e91d5fe_8

	var nextMiss7zgensym_ba2497133e91d5fe_8 int32 = -1
	var found7zgensym_ba2497133e91d5fe_8 [maxFields7zgensym_ba2497133e91d5fe_8]bool
	var curField7zgensym_ba2497133e91d5fe_8 string

doneWithStruct7zgensym_ba2497133e91d5fe_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_ba2497133e91d5fe_8 > 0 || missingFieldsLeft7zgensym_ba2497133e91d5fe_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_ba2497133e91d5fe_8, missingFieldsLeft7zgensym_ba2497133e91d5fe_8, msgp.ShowFound(found7zgensym_ba2497133e91d5fe_8[:]), decodeMsgFieldOrder7zgensym_ba2497133e91d5fe_8)
		if encodedFieldsLeft7zgensym_ba2497133e91d5fe_8 > 0 {
			encodedFieldsLeft7zgensym_ba2497133e91d5fe_8--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField7zgensym_ba2497133e91d5fe_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_ba2497133e91d5fe_8 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss7zgensym_ba2497133e91d5fe_8 = 0
			}
			for nextMiss7zgensym_ba2497133e91d5fe_8 < maxFields7zgensym_ba2497133e91d5fe_8 && (found7zgensym_ba2497133e91d5fe_8[nextMiss7zgensym_ba2497133e91d5fe_8] || decodeMsgFieldSkip7zgensym_ba2497133e91d5fe_8[nextMiss7zgensym_ba2497133e91d5fe_8]) {
				nextMiss7zgensym_ba2497133e91d5fe_8++
			}
			if nextMiss7zgensym_ba2497133e91d5fe_8 == maxFields7zgensym_ba2497133e91d5fe_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_ba2497133e91d5fe_8
			}
			missingFieldsLeft7zgensym_ba2497133e91d5fe_8--
			curField7zgensym_ba2497133e91d5fe_8 = decodeMsgFieldOrder7zgensym_ba2497133e91d5fe_8[nextMiss7zgensym_ba2497133e91d5fe_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_ba2497133e91d5fe_8)
		switch curField7zgensym_ba2497133e91d5fe_8 {
		// -- templateDecodeMsg ends here --

		case "shards_zid00_slc":
			found7zgensym_ba2497133e91d5fe_8[0] = true
			var zgensym_ba2497133e91d5fe_9 uint32
			zgensym_ba2497133e91d5fe_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.shards) >= int(zgensym_ba2497133e91d5fe_9) {
				z.shards = (z.shards)[:zgensym_ba2497133e91d5fe_9]
			} else {
				z.shards = make([]*lockedMap, zgensym_ba2497133e91d5fe_9)
			}
			for zgensym_ba2497133e91d5fe_6 := range z.shards {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					z.shards[zgensym_ba2497133e91d5fe_6] = nil
				} else if kptr, dup := dc.DedupReadIsDup("z.shards[zgensym_ba2497133e91d5fe_6]", "*lockedMap"); dup {
					z.shards[zgensym_ba2497133e91d5fe_6] = kptr.(*lockedMap)
				} else {
					if z.shards[zgensym_ba2497133e91d5fe_6] == nil {
						z.shards[zgensym_ba2497133e91d5fe_6] = new(lockedMap)
					}
					dc.DedupIndexEachPtr(z.shards[zgensym_ba2497133e91d5fe_6])

					const maxFields10zgensym_ba2497133e91d5fe_11 = 3

					// -- templateDecodeMsg starts here--
					var totalEncodedFields10zgensym_ba2497133e91d5fe_11 uint32
					totalEncodedFields10zgensym_ba2497133e91d5fe_11, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					encodedFieldsLeft10zgensym_ba2497133e91d5fe_11 := totalEncodedFields10zgensym_ba2497133e91d5fe_11
					missingFieldsLeft10zgensym_ba2497133e91d5fe_11 := maxFields10zgensym_ba2497133e91d5fe_11 - totalEncodedFields10zgensym_ba2497133e91d5fe_11

					var nextMiss10zgensym_ba2497133e91d5fe_11 int32 = -1
					var found10zgensym_ba2497133e91d5fe_11 [maxFields10zgensym_ba2497133e91d5fe_11]bool
					var curField10zgensym_ba2497133e91d5fe_11 string

				doneWithStruct10zgensym_ba2497133e91d5fe_11:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft10zgensym_ba2497133e91d5fe_11 > 0 || missingFieldsLeft10zgensym_ba2497133e91d5fe_11 > 0 {
						//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_ba2497133e91d5fe_11, missingFieldsLeft10zgensym_ba2497133e91d5fe_11, msgp.ShowFound(found10zgensym_ba2497133e91d5fe_11[:]), decodeMsgFieldOrder10zgensym_ba2497133e91d5fe_11)
						if encodedFieldsLeft10zgensym_ba2497133e91d5fe_11 > 0 {
							encodedFieldsLeft10zgensym_ba2497133e91d5fe_11--
							field, err = dc.ReadMapKeyPtr()
							if err != nil {
								return
							}
							curField10zgensym_ba2497133e91d5fe_11 = msgp.UnsafeString(field)
						} else {
							//missing fields need handling
							if nextMiss10zgensym_ba2497133e91d5fe_11 < 0 {
								// tell the reader to only give us Nils
								// until further notice.
								dc.PushAlwaysNil()
								nextMiss10zgensym_ba2497133e91d5fe_11 = 0
							}
							for nextMiss10zgensym_ba2497133e91d5fe_11 < maxFields10zgensym_ba2497133e91d5fe_11 && (found10zgensym_ba2497133e91d5fe_11[nextMiss10zgensym_ba2497133e91d5fe_11] || decodeMsgFieldSkip10zgensym_ba2497133e91d5fe_11[nextMiss10zgensym_ba2497133e91d5fe_11]) {
								nextMiss10zgensym_ba2497133e91d5fe_11++
							}
							if nextMiss10zgensym_ba2497133e91d5fe_11 == maxFields10zgensym_ba2497133e91d5fe_11 {
								// filled all the empty fields!
								break doneWithStruct10zgensym_ba2497133e91d5fe_11
							}
							missingFieldsLeft10zgensym_ba2497133e91d5fe_11--
							curField10zgensym_ba2497133e91d5fe_11 = decodeMsgFieldOrder10zgensym_ba2497133e91d5fe_11[nextMiss10zgensym_ba2497133e91d5fe_11]
						}
						//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_ba2497133e91d5fe_11)
						switch curField10zgensym_ba2497133e91d5fe_11 {
						// -- templateDecodeMsg ends here --

						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
					if nextMiss10zgensym_ba2497133e91d5fe_11 != -1 {
						dc.PopAlwaysNil()
					}

				}
			}
		case "expiryMap_zid01_ptr":
			found7zgensym_ba2497133e91d5fe_8[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.expiryMap != nil {
					dc.PushAlwaysNil()
					err = z.expiryMap.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.expiryMap == nil {
					z.expiryMap = new(expirationMap)
				}
				dc.DedupIndexEachPtr(z.expiryMap)

				err = z.expiryMap.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_ba2497133e91d5fe_8 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of shardedMap
var decodeMsgFieldOrder7zgensym_ba2497133e91d5fe_8 = []string{"shards_zid00_slc", "expiryMap_zid01_ptr"}

var decodeMsgFieldSkip7zgensym_ba2497133e91d5fe_8 = []bool{false, false}

// fields of lockedMap
var decodeMsgFieldOrder10zgensym_ba2497133e91d5fe_11 = []string{"", "", ""}

var decodeMsgFieldSkip10zgensym_ba2497133e91d5fe_11 = []bool{true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *shardedMap) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.shards) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.expiryMap == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *shardedMap) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_ba2497133e91d5fe_12 [2]bool
	fieldsInUse_zgensym_ba2497133e91d5fe_13 := z.fieldsNotEmpty(empty_zgensym_ba2497133e91d5fe_12[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_ba2497133e91d5fe_13 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'shardedMap'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4d, 0x61, 0x70})
	if err != nil {
		return err
	}

	if !empty_zgensym_ba2497133e91d5fe_12[0] {
		// write "shards_zid00_slc"
		err = en.Append(0xb0, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.shards)))
		if err != nil {
			return
		}
		for zgensym_ba2497133e91d5fe_6 := range z.shards {
			// gPtr.encodeGen():

			if z.shards[zgensym_ba2497133e91d5fe_6] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// record the pointer for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(z.shards[zgensym_ba2497133e91d5fe_6])
				if err != nil {
					return
				}
				if !dup {

					// honor the omitempty tags
					var empty_zgensym_ba2497133e91d5fe_14 [3]bool
					fieldsInUse_zgensym_ba2497133e91d5fe_15 := z.shards[zgensym_ba2497133e91d5fe_6].fieldsNotEmpty(empty_zgensym_ba2497133e91d5fe_14[:])

					// map header
					err = en.WriteMapHeader(fieldsInUse_zgensym_ba2497133e91d5fe_15 + 1)
					if err != nil {
						return err
					}

					// runtime struct type identification for 'lockedMap'
					err = en.Append(0xa1, 0x40)
					if err != nil {
						return err
					}
					err = en.WriteStringFromBytes([]byte{0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x70})
					if err != nil {
						return err
					}

				}
			}
		}
	}

	if !empty_zgensym_ba2497133e91d5fe_12[1] {
		// write "expiryMap_zid01_ptr"
		err = en.Append(0xb3, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.expiryMap == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.expiryMap)
			if err != nil {
				return
			}
			if !dup {
				err = z.expiryMap.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *shardedMap) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "shards_zid00_slc"
		o = append(o, 0xb0, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.shards)))
		for zgensym_ba2497133e91d5fe_6 := range z.shards {
			// marshalGen.gPtr()

			if z.shards[zgensym_ba2497133e91d5fe_6] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				// honor the omitempty tags
				var empty [3]bool
				fieldsInUse := z.shards[zgensym_ba2497133e91d5fe_6].fieldsNotEmpty(empty[:])
				o = msgp.AppendMapHeader(o, fieldsInUse)

			}
		}
	}

	if !empty[1] {
		// string "expiryMap_zid01_ptr"
		o = append(o, 0xb3, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.expiryMap == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.expiryMap.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *shardedMap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *shardedMap) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_ba2497133e91d5fe_17 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_ba2497133e91d5fe_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_ba2497133e91d5fe_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_ba2497133e91d5fe_17 := totalEncodedFields16zgensym_ba2497133e91d5fe_17
	missingFieldsLeft16zgensym_ba2497133e91d5fe_17 := maxFields16zgensym_ba2497133e91d5fe_17 - totalEncodedFields16zgensym_ba2497133e91d5fe_17

	var nextMiss16zgensym_ba2497133e91d5fe_17 int32 = -1
	var found16zgensym_ba2497133e91d5fe_17 [maxFields16zgensym_ba2497133e91d5fe_17]bool
	var curField16zgensym_ba2497133e91d5fe_17 string

doneWithStruct16zgensym_ba2497133e91d5fe_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_ba2497133e91d5fe_17 > 0 || missingFieldsLeft16zgensym_ba2497133e91d5fe_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_ba2497133e91d5fe_17, missingFieldsLeft16zgensym_ba2497133e91d5fe_17, msgp.ShowFound(found16zgensym_ba2497133e91d5fe_17[:]), unmarshalMsgFieldOrder16zgensym_ba2497133e91d5fe_17)
		if encodedFieldsLeft16zgensym_ba2497133e91d5fe_17 > 0 {
			encodedFieldsLeft16zgensym_ba2497133e91d5fe_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_ba2497133e91d5fe_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_ba2497133e91d5fe_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_ba2497133e91d5fe_17 = 0
			}
			for nextMiss16zgensym_ba2497133e91d5fe_17 < maxFields16zgensym_ba2497133e91d5fe_17 && (found16zgensym_ba2497133e91d5fe_17[nextMiss16zgensym_ba2497133e91d5fe_17] || unmarshalMsgFieldSkip16zgensym_ba2497133e91d5fe_17[nextMiss16zgensym_ba2497133e91d5fe_17]) {
				nextMiss16zgensym_ba2497133e91d5fe_17++
			}
			if nextMiss16zgensym_ba2497133e91d5fe_17 == maxFields16zgensym_ba2497133e91d5fe_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_ba2497133e91d5fe_17
			}
			missingFieldsLeft16zgensym_ba2497133e91d5fe_17--
			curField16zgensym_ba2497133e91d5fe_17 = unmarshalMsgFieldOrder16zgensym_ba2497133e91d5fe_17[nextMiss16zgensym_ba2497133e91d5fe_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_ba2497133e91d5fe_17)
		switch curField16zgensym_ba2497133e91d5fe_17 {
		// -- templateUnmarshalMsg ends here --

		case "shards_zid00_slc":
			found16zgensym_ba2497133e91d5fe_17[0] = true
			if nbs.AlwaysNil {
				(z.shards) = (z.shards)[:0]
			} else {

				var zgensym_ba2497133e91d5fe_18 uint32
				zgensym_ba2497133e91d5fe_18, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.shards) >= int(zgensym_ba2497133e91d5fe_18) {
					z.shards = (z.shards)[:zgensym_ba2497133e91d5fe_18]
				} else {
					z.shards = make([]*lockedMap, zgensym_ba2497133e91d5fe_18)
				}
				for zgensym_ba2497133e91d5fe_6 := range z.shards {
					// default gPtr logic.
					if nbs.PeekNil(bts) && z.shards[zgensym_ba2497133e91d5fe_6] == nil {
						// consume the nil
						bts, err = nbs.ReadNilBytes(bts)
						if err != nil {
							return
						}
					} else {
						// read as-if the wire has bytes, letting nbs take care of nils.

						if z.shards[zgensym_ba2497133e91d5fe_6] == nil {
							z.shards[zgensym_ba2497133e91d5fe_6] = new(lockedMap)
						}

						const maxFields19zgensym_ba2497133e91d5fe_20 = 3

						// -- templateUnmarshalMsg starts here--
						var totalEncodedFields19zgensym_ba2497133e91d5fe_20 uint32
						if !nbs.AlwaysNil {
							totalEncodedFields19zgensym_ba2497133e91d5fe_20, bts, err = nbs.ReadMapHeaderBytes(bts)
							if err != nil {
								return
							}
						}
						encodedFieldsLeft19zgensym_ba2497133e91d5fe_20 := totalEncodedFields19zgensym_ba2497133e91d5fe_20
						missingFieldsLeft19zgensym_ba2497133e91d5fe_20 := maxFields19zgensym_ba2497133e91d5fe_20 - totalEncodedFields19zgensym_ba2497133e91d5fe_20

						var nextMiss19zgensym_ba2497133e91d5fe_20 int32 = -1
						var found19zgensym_ba2497133e91d5fe_20 [maxFields19zgensym_ba2497133e91d5fe_20]bool
						var curField19zgensym_ba2497133e91d5fe_20 string

					doneWithStruct19zgensym_ba2497133e91d5fe_20:
						// First fill all the encoded fields, then
						// treat the remaining, missing fields, as Nil.
						for encodedFieldsLeft19zgensym_ba2497133e91d5fe_20 > 0 || missingFieldsLeft19zgensym_ba2497133e91d5fe_20 > 0 {
							//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft19zgensym_ba2497133e91d5fe_20, missingFieldsLeft19zgensym_ba2497133e91d5fe_20, msgp.ShowFound(found19zgensym_ba2497133e91d5fe_20[:]), unmarshalMsgFieldOrder19zgensym_ba2497133e91d5fe_20)
							if encodedFieldsLeft19zgensym_ba2497133e91d5fe_20 > 0 {
								encodedFieldsLeft19zgensym_ba2497133e91d5fe_20--
								field, bts, err = nbs.ReadMapKeyZC(bts)
								if err != nil {
									return
								}
								curField19zgensym_ba2497133e91d5fe_20 = msgp.UnsafeString(field)
							} else {
								//missing fields need handling
								if nextMiss19zgensym_ba2497133e91d5fe_20 < 0 {
									// set bts to contain just mnil (0xc0)
									bts = nbs.PushAlwaysNil(bts)
									nextMiss19zgensym_ba2497133e91d5fe_20 = 0
								}
								for nextMiss19zgensym_ba2497133e91d5fe_20 < maxFields19zgensym_ba2497133e91d5fe_20 && (found19zgensym_ba2497133e91d5fe_20[nextMiss19zgensym_ba2497133e91d5fe_20] || unmarshalMsgFieldSkip19zgensym_ba2497133e91d5fe_20[nextMiss19zgensym_ba2497133e91d5fe_20]) {
									nextMiss19zgensym_ba2497133e91d5fe_20++
								}
								if nextMiss19zgensym_ba2497133e91d5fe_20 == maxFields19zgensym_ba2497133e91d5fe_20 {
									// filled all the empty fields!
									break doneWithStruct19zgensym_ba2497133e91d5fe_20
								}
								missingFieldsLeft19zgensym_ba2497133e91d5fe_20--
								curField19zgensym_ba2497133e91d5fe_20 = unmarshalMsgFieldOrder19zgensym_ba2497133e91d5fe_20[nextMiss19zgensym_ba2497133e91d5fe_20]
							}
							//fmt.Printf("switching on curField: '%v'\n", curField19zgensym_ba2497133e91d5fe_20)
							switch curField19zgensym_ba2497133e91d5fe_20 {
							// -- templateUnmarshalMsg ends here --

							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									return
								}
							}
						}
						if nextMiss19zgensym_ba2497133e91d5fe_20 != -1 {
							bts = nbs.PopAlwaysNil()
						}

					}
				}
			}
		case "expiryMap_zid01_ptr":
			found16zgensym_ba2497133e91d5fe_17[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.expiryMap", alias:"expirationMap", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.expiryMap != nil {
					z.expiryMap.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.expiryMap {
						z.expiryMap.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.expiryMap == nil {
						z.expiryMap = new(expirationMap)
					}

					bts, err = z.expiryMap.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_ba2497133e91d5fe_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of shardedMap
var unmarshalMsgFieldOrder16zgensym_ba2497133e91d5fe_17 = []string{"shards_zid00_slc", "expiryMap_zid01_ptr"}

var unmarshalMsgFieldSkip16zgensym_ba2497133e91d5fe_17 = []bool{false, false}

// fields of lockedMap
var unmarshalMsgFieldOrder19zgensym_ba2497133e91d5fe_20 = []string{"", "", ""}

var unmarshalMsgFieldSkip19zgensym_ba2497133e91d5fe_20 = []bool{true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *shardedMap) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize
	for zgensym_ba2497133e91d5fe_6 := range z.shards {
		if z.shards[zgensym_ba2497133e91d5fe_6] == nil {
			s += msgp.NilSize
		} else {
			s += 1
		}
	}
	s += 20
	if z.expiryMap == nil {
		s += msgp.NilSize
	} else {
		s += z.expiryMap.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *storeItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields21zgensym_ba2497133e91d5fe_22 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields21zgensym_ba2497133e91d5fe_22 uint32
	totalEncodedFields21zgensym_ba2497133e91d5fe_22, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft21zgensym_ba2497133e91d5fe_22 := totalEncodedFields21zgensym_ba2497133e91d5fe_22
	missingFieldsLeft21zgensym_ba2497133e91d5fe_22 := maxFields21zgensym_ba2497133e91d5fe_22 - totalEncodedFields21zgensym_ba2497133e91d5fe_22

	var nextMiss21zgensym_ba2497133e91d5fe_22 int32 = -1
	var found21zgensym_ba2497133e91d5fe_22 [maxFields21zgensym_ba2497133e91d5fe_22]bool
	var curField21zgensym_ba2497133e91d5fe_22 string

doneWithStruct21zgensym_ba2497133e91d5fe_22:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft21zgensym_ba2497133e91d5fe_22 > 0 || missingFieldsLeft21zgensym_ba2497133e91d5fe_22 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft21zgensym_ba2497133e91d5fe_22, missingFieldsLeft21zgensym_ba2497133e91d5fe_22, msgp.ShowFound(found21zgensym_ba2497133e91d5fe_22[:]), decodeMsgFieldOrder21zgensym_ba2497133e91d5fe_22)
		if encodedFieldsLeft21zgensym_ba2497133e91d5fe_22 > 0 {
			encodedFieldsLeft21zgensym_ba2497133e91d5fe_22--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField21zgensym_ba2497133e91d5fe_22 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss21zgensym_ba2497133e91d5fe_22 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss21zgensym_ba2497133e91d5fe_22 = 0
			}
			for nextMiss21zgensym_ba2497133e91d5fe_22 < maxFields21zgensym_ba2497133e91d5fe_22 && (found21zgensym_ba2497133e91d5fe_22[nextMiss21zgensym_ba2497133e91d5fe_22] || decodeMsgFieldSkip21zgensym_ba2497133e91d5fe_22[nextMiss21zgensym_ba2497133e91d5fe_22]) {
				nextMiss21zgensym_ba2497133e91d5fe_22++
			}
			if nextMiss21zgensym_ba2497133e91d5fe_22 == maxFields21zgensym_ba2497133e91d5fe_22 {
				// filled all the empty fields!
				break doneWithStruct21zgensym_ba2497133e91d5fe_22
			}
			missingFieldsLeft21zgensym_ba2497133e91d5fe_22--
			curField21zgensym_ba2497133e91d5fe_22 = decodeMsgFieldOrder21zgensym_ba2497133e91d5fe_22[nextMiss21zgensym_ba2497133e91d5fe_22]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField21zgensym_ba2497133e91d5fe_22)
		switch curField21zgensym_ba2497133e91d5fe_22 {
		// -- templateDecodeMsg ends here --

		case "key_zid00_u64":
			found21zgensym_ba2497133e91d5fe_22[0] = true
			z.key, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "conflict_zid01_u64":
			found21zgensym_ba2497133e91d5fe_22[1] = true
			z.conflict, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "value_zid02_ifc":
			found21zgensym_ba2497133e91d5fe_22[2] = true
			z.value, err = dc.ReadIntf()
			if err != nil {
				return
			}
		case "expiration_zid03_tim":
			found21zgensym_ba2497133e91d5fe_22[3] = true
			z.expiration, err = dc.ReadTime()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss21zgensym_ba2497133e91d5fe_22 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of storeItem
var decodeMsgFieldOrder21zgensym_ba2497133e91d5fe_22 = []string{"key_zid00_u64", "conflict_zid01_u64", "value_zid02_ifc", "expiration_zid03_tim"}

var decodeMsgFieldSkip21zgensym_ba2497133e91d5fe_22 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *storeItem) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.key == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.conflict == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = false
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.expiration.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *storeItem) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_ba2497133e91d5fe_23 [4]bool
	fieldsInUse_zgensym_ba2497133e91d5fe_24 := z.fieldsNotEmpty(empty_zgensym_ba2497133e91d5fe_23[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_ba2497133e91d5fe_24 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'storeItem'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_ba2497133e91d5fe_23[0] {
		// write "key_zid00_u64"
		err = en.Append(0xad, 0x6b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.key)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_ba2497133e91d5fe_23[1] {
		// write "conflict_zid01_u64"
		err = en.Append(0xb2, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.conflict)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_ba2497133e91d5fe_23[2] {
		// write "value_zid02_ifc"
		err = en.Append(0xaf, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x66, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteIntf(z.value)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_ba2497133e91d5fe_23[3] {
		// write "expiration_zid03_tim"
		err = en.Append(0xb4, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.expiration)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *storeItem) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "key_zid00_u64"
		o = append(o, 0xad, 0x6b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.key)
	}

	if !empty[1] {
		// string "conflict_zid01_u64"
		o = append(o, 0xb2, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.conflict)
	}

	if !empty[2] {
		// string "value_zid02_ifc"
		o = append(o, 0xaf, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x66, 0x63)
		o, err = msgp.AppendIntf(o, z.value)
		if err != nil {
			return
		}
	}

	if !empty[3] {
		// string "expiration_zid03_tim"
		o = append(o, 0xb4, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.expiration)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *storeItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *storeItem) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_ba2497133e91d5fe_26 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields25zgensym_ba2497133e91d5fe_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_ba2497133e91d5fe_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_ba2497133e91d5fe_26 := totalEncodedFields25zgensym_ba2497133e91d5fe_26
	missingFieldsLeft25zgensym_ba2497133e91d5fe_26 := maxFields25zgensym_ba2497133e91d5fe_26 - totalEncodedFields25zgensym_ba2497133e91d5fe_26

	var nextMiss25zgensym_ba2497133e91d5fe_26 int32 = -1
	var found25zgensym_ba2497133e91d5fe_26 [maxFields25zgensym_ba2497133e91d5fe_26]bool
	var curField25zgensym_ba2497133e91d5fe_26 string

doneWithStruct25zgensym_ba2497133e91d5fe_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_ba2497133e91d5fe_26 > 0 || missingFieldsLeft25zgensym_ba2497133e91d5fe_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_ba2497133e91d5fe_26, missingFieldsLeft25zgensym_ba2497133e91d5fe_26, msgp.ShowFound(found25zgensym_ba2497133e91d5fe_26[:]), unmarshalMsgFieldOrder25zgensym_ba2497133e91d5fe_26)
		if encodedFieldsLeft25zgensym_ba2497133e91d5fe_26 > 0 {
			encodedFieldsLeft25zgensym_ba2497133e91d5fe_26--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField25zgensym_ba2497133e91d5fe_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_ba2497133e91d5fe_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_ba2497133e91d5fe_26 = 0
			}
			for nextMiss25zgensym_ba2497133e91d5fe_26 < maxFields25zgensym_ba2497133e91d5fe_26 && (found25zgensym_ba2497133e91d5fe_26[nextMiss25zgensym_ba2497133e91d5fe_26] || unmarshalMsgFieldSkip25zgensym_ba2497133e91d5fe_26[nextMiss25zgensym_ba2497133e91d5fe_26]) {
				nextMiss25zgensym_ba2497133e91d5fe_26++
			}
			if nextMiss25zgensym_ba2497133e91d5fe_26 == maxFields25zgensym_ba2497133e91d5fe_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_ba2497133e91d5fe_26
			}
			missingFieldsLeft25zgensym_ba2497133e91d5fe_26--
			curField25zgensym_ba2497133e91d5fe_26 = unmarshalMsgFieldOrder25zgensym_ba2497133e91d5fe_26[nextMiss25zgensym_ba2497133e91d5fe_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_ba2497133e91d5fe_26)
		switch curField25zgensym_ba2497133e91d5fe_26 {
		// -- templateUnmarshalMsg ends here --

		case "key_zid00_u64":
			found25zgensym_ba2497133e91d5fe_26[0] = true
			z.key, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "conflict_zid01_u64":
			found25zgensym_ba2497133e91d5fe_26[1] = true
			z.conflict, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "value_zid02_ifc":
			found25zgensym_ba2497133e91d5fe_26[2] = true
			z.value, bts, err = nbs.ReadIntfBytes(bts)

			if err != nil {
				return
			}
		case "expiration_zid03_tim":
			found25zgensym_ba2497133e91d5fe_26[3] = true
			z.expiration, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_ba2497133e91d5fe_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of storeItem
var unmarshalMsgFieldOrder25zgensym_ba2497133e91d5fe_26 = []string{"key_zid00_u64", "conflict_zid01_u64", "value_zid02_ifc", "expiration_zid03_tim"}

var unmarshalMsgFieldSkip25zgensym_ba2497133e91d5fe_26 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *storeItem) Msgsize() (s int) {
	s = 1 + 14 + msgp.Uint64Size + 19 + msgp.Uint64Size + 16 + msgp.GuessSize(z.value) + 21 + msgp.TimeSize
	return
}
